[
  {
    "content": "\n      You are an expert at building fullstack mobile applications using Supabase as backend and Expo + React Native for frontend.\n      \n      Given a request for creating an app, you will first think through the problem and come up with an extensive list of features for the app.\n      You will first architect the app using database, data and UI components that will enable the functionality of the app. Represent the architecture as a mermaid diagram. Keep it simple and functional.\n      Then to implement the app, come up with the list of components that can be derived from the app architecture. For now components are just placeholders and code for the components will be requested later.\n\n      Assume the project code will be created using 'npx create-expo-app' and uses expo-router with typescript template.\n      This is the tech stack that will be used: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   \n\n      Database Instructions: For the database, generate scripts to initialize the Supabase database by keeping in mind the default schemas available from Supabase.   The script must first create tables and alter them if needed to set policies to make sure the table exists before creating the policies..\n\n      Authentication: User must be able to sign up and sign in to the app with email and password. Do not use google auth. Make sure the database design and UI auth flow supports this..\n\n      \n  Things to keep in mind when designing the app:\n  1. Code for components will be requested later so all components must be listed in the response.\n  2. A component can be dependent on another component. If a component is dependent on another component, make sure to list the components as dependents in the response.\n  3. There should be no circular dependencies between components.\n  4. Make sure the app has a home page which acts as the entry point of the app.\n  5. Make sure the components design adhere to the framework we are using and the file path of the components are consistent.\n  6. Use the best practices suggested by the react-native framework.\n  \n\n      User will first request architecture and design for the app and request code the components one by one sequentially.\n      If the user asks a non-programming question, politely decline to respond.\n      ",
    "role": "system"
  },
  {
    "content": "Create app for: # General UI Layout and Design\r\n\r\n## **1. Overview**\r\n\r\nThis document defines the **complete design and requirements** for a pluggable, hook-driven GUI dashboard shell, supporting rapid feature expansion with zero core rewrites.  \r\n**Every region of the UI exposes registration hooks, allowing new tools, panels, and modes to be dynamically added at runtime.**  \r\nThe intent is to maximize **extensibility, modularity, and dev velocity**—all future features can be plugged in, not hardcoded.\r\n\r\n---\r\n\r\n## **2. High-Level Goals**\r\n\r\n- **Fast MVP:** Core UI up and running with placeholder/pattern tools, to allow early feature testing.\r\n    \r\n- **Hookable:** All major areas can have new elements (tools, panels, content) registered at runtime, never via layout edits.\r\n    \r\n- **Separation of Concerns:** UI shell knows nothing about concrete tools/features—only that they can be registered and rendered.\r\n    \r\n- **Maintainability:** Any developer can add, replace, or remove UI tools and panels by registering/deregistering them.\r\n    \r\n- **Future-Proof:** Foundation is ready for power-user features, multi-pane layouts, or even plugin ecosystems.\r\n    \r\n\r\n---\r\n\r\n## **3. UI Regions & Element Names**\r\n\r\n### **3.1. AppShell**\r\n\r\n- **Role:** Orchestrator. Initializes layout, manages plugin registry, propagates events.\r\n    \r\n- **Contents:** NavBar, SidePanel, MainContentArea, InspectorPanel, PluginRegistry.\r\n    \r\n\r\n---\r\n\r\n### **3.2. Navigation Bar (\"NavBar\")**\r\n\r\n- **Location:** Far left, vertical.\r\n    \r\n- **Function:** Primary mode & tool selection (think VS Code Activity Bar or Photoshop's main vertical tool bar).\r\n    \r\n- **Behavior:**\r\n    \r\n    - All tools/modes are registered at runtime.\r\n        \r\n    - Clicking a tool/mode updates the active SidePanel and MainContentArea view.\r\n        \r\n    - Each tool/mode may optionally trigger a default SidePanel or Main Content.\r\n        \r\n- **Extensibility:**\r\n    \r\n    - _RegisterTool_ hook: Any tool, mode, or core app section can be registered here.\r\n        \r\n\r\n---\r\n\r\n### **3.3. Side Panel (\"SidePanel\")**\r\n\r\n- **Location:** Left, next to NavBar.\r\n    \r\n- **Function:** Contextual panel for navigation, asset browsing, layers, search, etc.\r\n    \r\n- **Behavior:**\r\n    \r\n    - Content changes based on active NavBar tool/mode.\r\n        \r\n    - May be empty or display tool-specific panels (file explorer, asset browser, layers, etc).\r\n        \r\n- **Extensibility:**\r\n    \r\n    - _RegisterSidePanel_ hook: Tools/modes register their panels, keyed by active tool.\r\n        \r\n\r\n---\r\n\r\n### **3.4. Main Content Area (\"MainContentArea\")**\r\n\r\n- **Location:** Center, takes up bulk of screen.\r\n    \r\n- **Function:** Primary workspace—where editing, creation, or main tasks occur.\r\n    \r\n- **Behavior:**\r\n    \r\n    - Displays editors, canvases, dashboards, etc, depending on current mode/tool.\r\n        \r\n    - Can support tabs, multi-pane, or dynamic embedding if needed.\r\n        \r\n- **Extensibility:**\r\n    \r\n    - _RegisterMainContent_ hook: Any tool/mode can register its own main view/component.\r\n        \r\n\r\n---\r\n\r\n### **3.5. Inspector Panel (\"InspectorPanel\")**\r\n\r\n- **Location:** Right edge.\r\n    \r\n- **Function:** Context-aware details/properties/settings panel (think Godot/Photoshop Inspector/Properties).\r\n    \r\n- **Behavior:**\r\n    \r\n    - Populates dynamically based on current selection/context in Main Content or Side Panel.\r\n        \r\n    - Can be empty, minimal, or a complex interactive editor.\r\n        \r\n    - Should handle “no selection” gracefully (empty or message).\r\n        \r\n- **Extensibility:**\r\n    \r\n    - _RegisterInspector_ hook: Any tool/context can register panels, keyed to selection/type.\r\n        \r\n\r\n---\r\n\r\n### **3.6. Plugin Registry (\"PluginRegistry\")**\r\n\r\n- **Role:** Central manager for all UI hooks.\r\n    \r\n- **Function:**\r\n    \r\n    - Exposes APIs to register/deregister tools, panels, content, and inspector views.\r\n        \r\n    - Ensures unique keys/namespaces.\r\n        \r\n    - Manages update/subscription for all regions.\r\n        \r\n    - May support dynamic loading (code splitting, plugin loading, etc) later.\r\n        \r\n\r\n---\r\n\r\n## **4. System Flows**\r\n\r\n### **4.1. Registration Flow**\r\n\r\n- **All tools, panels, and views are registered with the PluginRegistry** using explicit APIs.\r\n    \r\n- No UI region knows about concrete tools/modes—only about _what's registered_.\r\n    \r\n- Sample registration:\r\n    \r\n    - RegisterTool({key, icon, label, component, ...})\r\n        \r\n    - RegisterSidePanel({toolKey, panelComponent})\r\n        \r\n    - RegisterMainContent({toolKey, contentComponent})\r\n        \r\n    - RegisterInspector({contextType, inspectorComponent})\r\n        \r\n\r\n---\r\n\r\n### **4.2. User Navigation Flow**\r\n\r\n```txt\r\nUser clicks a Tool in NavBar\r\n    -> NavBar notifies AppShell (or via context)\r\n    -> AppShell looks up registered SidePanel for tool, renders it\r\n    -> AppShell looks up registered MainContent for tool, renders it\r\n    -> Any selection made in MainContent triggers InspectorPanel update,\r\n         using registered inspector for the selection/context type\r\n```\r\n\r\n---\r\n\r\n### **4.3. Context/Selection Flow**\r\n\r\n```txt\r\nUser selects item in MainContentArea or SidePanel\r\n    -> AppShell detects selection/context change\r\n    -> AppShell queries PluginRegistry for InspectorPanel registration for that context\r\n    -> InspectorPanel displays relevant info, fields, actions, or remains empty\r\n```\r\n\r\n---\r\n\r\n### **4.4. Adding New Tools/Features**\r\n\r\n```txt\r\nDev writes new Tool/Panel/Content/Inspector component\r\n    -> Registers it with PluginRegistry at app start (or runtime, for hot plugins)\r\n    -> New tool appears in NavBar, new panel/content/inspector is available as soon as that tool/context is active\r\n    -> No core shell/layout changes are needed\r\n```\r\n\r\n---\r\n\r\n## **5. Hook (Registration) APIs**\r\n\r\n### **5.1. Registering a Tool/Mode**\r\n\r\n```ts\r\nPluginRegistry.registerTool({\r\n  key: \"assetManager\",\r\n  label: \"Assets\",\r\n  icon: \"folder\",\r\n  component: AssetManagerTool,\r\n})\r\n```\r\n\r\n- **NavBar** will render a button using `label` and `icon`, activating `component` on click.\r\n    \r\n\r\n### **5.2. Registering a Side Panel**\r\n\r\n```ts\r\nPluginRegistry.registerSidePanel({\r\n  toolKey: \"assetManager\",\r\n  panelComponent: AssetPanel,\r\n})\r\n```\r\n\r\n- **SidePanel** listens for active tool and renders matching registered panel.\r\n    \r\n\r\n### **5.3. Registering a Main Content View**\r\n\r\n```ts\r\nPluginRegistry.registerMainContent({\r\n  toolKey: \"assetManager\",\r\n  contentComponent: AssetWorkspace,\r\n})\r\n```\r\n\r\n- **MainContentArea** updates based on active tool, showing matching registered view.\r\n    \r\n\r\n### **5.4. Registering an Inspector Panel**\r\n\r\n```ts\r\nPluginRegistry.registerInspector({\r\n  contextType: \"asset\",\r\n  inspectorComponent: AssetInspector,\r\n})\r\n```\r\n\r\n- **InspectorPanel** updates based on current selection/context.\r\n    \r\n\r\n---\r\n\r\n## **6. DiagramFlow Architecture (for devs and LLMs)**\r\n\r\n```txt\r\nNODE AppShell         TYPE: State   DESC: \"App root, holds layout & plugin registry\"\r\nNODE NavBar           TYPE: State   DESC: \"Main vertical tool bar\"\r\nNODE SidePanel        TYPE: State   DESC: \"Contextual left panel\"\r\nNODE MainContentArea  TYPE: State   DESC: \"Workspace\"\r\nNODE InspectorPanel   TYPE: State   DESC: \"Details/properties/context panel\"\r\nNODE PluginRegistry   TYPE: Logic   DESC: \"Manages all dynamic plugin/hook registrations\"\r\n\r\nAppShell -> NavBar\r\nAppShell -> SidePanel\r\nAppShell -> MainContentArea\r\nAppShell -> InspectorPanel\r\nAppShell -> PluginRegistry\r\n\r\nPluginRegistry => [RegisterTool, RegisterSidePanel, RegisterMainContent, RegisterInspector]\r\n\r\nRegisterTool         -> NavBar        DESC: \"Populate tools\"\r\nRegisterSidePanel    -> SidePanel     DESC: \"Populate context panels\"\r\nRegisterMainContent  -> MainContentArea DESC: \"Populate workspace\"\r\nRegisterInspector    -> InspectorPanel DESC: \"Populate details\"\r\nNavBar [onToolSelect] -> SidePanel\r\nNavBar [onToolSelect] -> MainContentArea\r\nMainContentArea [onSelectItem] -> InspectorPanel\r\n```\r\n\r\n---\r\n\r\n## **7. Additional Guidelines and Conventions**\r\n\r\n- **All UI regions must support “empty”/default state (nothing selected, no active tool).**\r\n    \r\n- **Keyboard navigation and accessibility hooks should be considered from day one.**\r\n    \r\n- **Context menu and right-click support in MainContentArea and InspectorPanel recommended (but optional in MVP).**\r\n    \r\n- **All registration functions must be idempotent and safe for hot reloads (dev workflow).**\r\n    \r\n- **Future plugins should support lazy loading/code-splitting, though MVP can use static imports.**\r\n    \r\n- **All major events (tool change, selection change, registration) should be logged or traced for debugging.**\r\n    \r\n- **No direct imports/coupling between tools/panels/content—_all comms via registration/context._ (No spaghetti dependencies!)**\r\n    \r\n- **Naming conventions:** Use camelCase for keys, PascalCase for component names.\r\n    \r\n\r\n---\r\n\r\n## **8. Example MVP Flow**\r\n\r\n- On startup, AppShell renders empty NavBar, SidePanel, MainContentArea, InspectorPanel.\r\n    \r\n- Core app registers a handful of dummy tools (\"Assets\", \"Editor\", \"Settings\") and their panels.\r\n    \r\n- User clicks \"Editor\" tool:\r\n    \r\n    - NavBar marks \"Editor\" active.\r\n        \r\n    - SidePanel swaps to \"EditorPanel\" (could be blank).\r\n        \r\n    - MainContentArea swaps to \"EditorWorkspace\".\r\n        \r\n    - No selection—InspectorPanel is empty.\r\n        \r\n- User selects an object in EditorWorkspace:\r\n    \r\n    - InspectorPanel populates with \"ObjectInspector\", registered for \"object\" context.\r\n        \r\n- Dev adds a \"Metrics\" tool via new code:\r\n    \r\n    - Registers with PluginRegistry, appears in NavBar, SidePanel, etc—no layout edits.\r\n        \r\n\r\n---\r\n\r\n## **9. Future-Proofing and Scalability**\r\n\r\n- The system should be ready to support:\r\n    \r\n    - Tabbed/multipane MainContentArea\r\n        \r\n    - Multiple InspectorPanels (split details)\r\n        \r\n    - Plugin discovery/remote loading\r\n        \r\n    - User configuration of tools and layout\r\n        \r\n    - Theming/dark mode\r\n        \r\n    - Undo/redo, event bus, context menus, extensible hotkeys\r\n        \r\n\r\n---\r\n\r\n## **10. Glossary**\r\n\r\n|**Term**|**Description**|\r\n|---|---|\r\n|**AppShell**|Root component, manages everything|\r\n|**NavBar**|Vertical toolbar, primary app modes/tools|\r\n|**SidePanel**|Context panel, left side, changes per tool|\r\n|**MainContentArea**|Central workspace, shows main editors|\r\n|**InspectorPanel**|Right panel, shows details/properties/settings|\r\n|**PluginRegistry**|Logic/service for registering/extending UI|\r\n|**Tool/Mode**|A major app feature, shown in NavBar|\r\n|**Panel**|Any component in SidePanel, Inspector, or elsewhere|\r\n|**Hook/Registration API**|Function for plugging new things into the UI shell|\r\n\r\n---\r\n\r\n## **11. Final Notes**\r\n\r\n- This doc is your **single source of truth** for the MVP UI and future extension.\r\n\r\n- **Nothing in the UI shell should ever depend on a specific tool or feature.**\r\n\r\n- **All comms and wiring go through the registry/hook pattern.**\r\n\r\n- **Every new panel, mode, or feature must be pluggable, discoverable, and replaceable.**\r\n",
    "role": "user"
  },
  {
    "content": "{\n  \"summary\": \"A pluggable, hook-driven GUI dashboard shell designed for rapid feature expansion, modularity, and extensibility. All UI regions (NavBar, SidePanel, MainContentArea, InspectorPanel) are dynamically populated via registration hooks managed by a central PluginRegistry. No core rewrites are needed to add new tools, panels, or features.\",\n  \"error\": null,\n  \"name\": \"PluggableDashboardShell\",\n  \"title\": \"Pluggable Dashboard Shell\",\n  \"features\": [\n    \"Dynamic registration of tools, panels, and content at runtime\",\n    \"Central PluginRegistry for all UI extension points\",\n    \"NavBar for tool/mode selection, populated via registration\",\n    \"SidePanel, MainContentArea, and InspectorPanel, all populated via hooks\",\n    \"No hardcoded tools or panels in the UI shell\",\n    \"Support for empty/default states in all regions\",\n    \"Separation of concerns: UI shell is agnostic to concrete features\",\n    \"Idempotent, hot-reload-safe registration APIs\",\n    \"Accessibility and keyboard navigation ready\",\n    \"Event logging for tool changes, selection, and registration\"\n  ],\n  \"architecture\": \"graph TD\\n  AppShell --> NavBar\\n  AppShell --> SidePanel\\n  AppShell --> MainContentArea\\n  AppShell --> InspectorPanel\\n  AppShell --> PluginRegistry\\n  PluginRegistry --> RegisterTool\\n  PluginRegistry --> RegisterSidePanel\\n  PluginRegistry --> RegisterMainContent\\n  PluginRegistry --> RegisterInspector\\n  RegisterTool --> NavBar\\n  RegisterSidePanel --> SidePanel\\n  RegisterMainContent --> MainContentArea\\n  RegisterInspector --> InspectorPanel\\n  NavBar -- onToolSelect --> SidePanel\\n  NavBar -- onToolSelect --> MainContentArea\\n  MainContentArea -- onSelectItem --> InspectorPanel\",\n  \"design\": \"{\\n  \\\"colors\\\": {\\n    \\\"primary\\\": \\\"#1976D2\\\",\\n    \\\"secondary\\\": \\\"#424242\\\",\\n    \\\"background\\\": \\\"#F5F5F5\\\",\\n    \\\"surface\\\": \\\"#FFFFFF\\\",\\n    \\\"accent\\\": \\\"#FF4081\\\",\\n    \\\"navBar\\\": \\\"#263238\\\",\\n    \\\"sidePanel\\\": \\\"#ECEFF1\\\",\\n    \\\"inspectorPanel\\\": \\\"#FAFAFA\\\"\\n  },\\n  \\\"fonts\\\": {\\n    \\\"primary\\\": \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n    \\\"size\\\": \\\"16px\\\",\\n    \\\"weight\\\": \\\"400\\\"\\n  },\\n  \\\"spacing\\\": {\\n    \\\"padding\\\": \\\"16px\\\",\\n    \\\"margin\\\": \\\"16px\\\"\\n  },\\n  \\\"borderRadius\\\": \\\"8px\\\",\\n  \\\"shadows\\\": true,\\n  \\\"iconSet\\\": \\\"MaterialCommunityIcons\\\",\\n  \\\"accessibility\\\": true\\n}\",\n  \"components\": [\n    {\n      \"name\": \"AppShell\",\n      \"type\": \"layout\",\n      \"purpose\": \"Root orchestrator, initializes layout, manages plugin registry, propagates events\",\n      \"path\": \"app/AppShell.tsx\",\n      \"dependsOn\": [\"NavBar\", \"SidePanel\", \"MainContentArea\", \"InspectorPanel\", \"PluginRegistry\"]\n    },\n    {\n      \"name\": \"NavBar\",\n      \"type\": \"ui_component\",\n      \"purpose\": \"Vertical toolbar for tool/mode selection, populated via registration\",\n      \"path\": \"components/NavBar.tsx\",\n      \"dependsOn\": [\"PluginRegistry\"]\n    },\n    {\n      \"name\": \"SidePanel\",\n      \"type\": \"ui_component\",\n      \"purpose\": \"Contextual left panel, content changes per active tool\",\n      \"path\": \"components/SidePanel.tsx\",\n      \"dependsOn\": [\"PluginRegistry\"]\n    },\n    {\n      \"name\": \"MainContentArea\",\n      \"type\": \"ui_component\",\n      \"purpose\": \"Central workspace, displays main editors/content per tool\",\n      \"path\": \"components/MainContentArea.tsx\",\n      \"dependsOn\": [\"PluginRegistry\"]\n    },\n    {\n      \"name\": \"InspectorPanel\",\n      \"type\": \"ui_component\",\n      \"purpose\": \"Right panel for details/properties/settings, context-aware\",\n      \"path\": \"components/InspectorPanel.tsx\",\n      \"dependsOn\": [\"PluginRegistry\"]\n    },\n    {\n      \"name\": \"PluginRegistry\",\n      \"type\": \"service\",\n      \"purpose\": \"Central manager for all UI hooks and registration APIs\",\n      \"path\": \"services/PluginRegistry.ts\",\n      \"dependsOn\": []\n    },\n    {\n      \"name\": \"usePluginRegistry\",\n      \"type\": \"hook\",\n      \"purpose\": \"React hook for accessing and subscribing to PluginRegistry updates\",\n      \"path\": \"hooks/usePluginRegistry.ts\",\n      \"dependsOn\": [\"PluginRegistry\"]\n    },\n    {\n      \"name\": \"RegisterTool\",\n      \"type\": \"util\",\n      \"purpose\": \"API for registering tools/modes in the NavBar\",\n      \"path\": \"services/registration/RegisterTool.ts\",\n      \"dependsOn\": [\"PluginRegistry\"]\n    },\n    {\n      \"name\": \"RegisterSidePanel\",\n      \"type\": \"util\",\n      \"purpose\": \"API for registering contextual panels in the SidePanel\",\n      \"path\": \"services/registration/RegisterSidePanel.ts\",\n      \"dependsOn\": [\"PluginRegistry\"]\n    },\n    {\n      \"name\": \"RegisterMainContent\",\n      \"type\": \"util\",\n      \"purpose\": \"API for registering main content views in MainContentArea\",\n      \"path\": \"services/registration/RegisterMainContent.ts\",\n      \"dependsOn\": [\"PluginRegistry\"]\n    },\n    {\n      \"name\": \"RegisterInspector\",\n      \"type\": \"util\",\n      \"purpose\": \"API for registering inspector panels for context types\",\n      \"path\": \"services/registration/RegisterInspector.ts\",\n      \"dependsOn\": [\"PluginRegistry\"]\n    },\n    {\n      \"name\": \"zustandStore\",\n      \"type\": \"service\",\n      \"purpose\": \"Global state management for active tool, selection, etc.\",\n      \"path\": \"store/zustandStore.ts\",\n      \"dependsOn\": []\n    },\n    {\n      \"name\": \"ThemeProvider\",\n      \"type\": \"ui_component\",\n      \"purpose\": \"Provides theme, colors, and fonts to the app\",\n      \"path\": \"components/ThemeProvider.tsx\",\n      \"dependsOn\": []\n    }\n  ],\n  \"sqlScripts\": \"-- No database tables required for MVP shell, but a minimal users table for authentication if needed\\ncreate table if not exists public.users (\\n  id uuid primary key default gen_random_uuid(),\\n  email text unique not null,\\n  password_hash text not null,\\n  created_at timestamp with time zone default timezone('utc'::text, now())\\n);\\n\\nalter table public.users enable row level security;\\n\\ncreate policy \\\"Allow authenticated read access\\\" on public.users\\n  for select using (auth.uid() = id);\\n\\ncreate policy \\\"Allow authenticated insert\\\" on public.users\\n  for insert with check (true);\\n\\ncreate policy \\\"Allow authenticated update\\\" on public.users\\n  for update using (auth.uid() = id);\\n\"\n}",
    "role": "assistant"
  },
  {
    "content": "Lets start generating code for the components one by one.Do not create placeholder code.Write the actual code that will be used in production.Use typescript for the code.Wait for the code generation request.",
    "role": "user"
  },
  {
    "content": "Generate code for component PluginRegistry located at path: services/PluginRegistry.ts. Purpose of the component: Central manager for all UI hooks and registration APIs. Type: service.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component zustandStore located at path: store/zustandStore.ts. Purpose of the component: Global state management for active tool, selection, etc.. Type: service.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component ThemeProvider located at path: components/ThemeProvider.tsx. Purpose of the component: Provides theme, colors, and fonts to the app. Type: ui_component.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component usePluginRegistry located at path: hooks/usePluginRegistry.ts. Purpose of the component: React hook for accessing and subscribing to PluginRegistry updates. Type: hook.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: components/ThemeProvider.tsx\n        ================================\n        import React, { ReactNode, useMemo } from 'react';\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n};\n\nconst customTheme: Theme = {\n  ...DefaultTheme,\n  roundness: 8,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#1976D2',\n    accent: '#FF4081',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#212121',\n    disabled: '#BDBDBD',\n    placeholder: '#757575',\n    notification: '#FF4081',\n    secondary: '#424242',\n    navBar: '#263238',\n    sidePanel: '#ECEFF1',\n    inspectorPanel: '#FAFAFA',\n  } as Theme['colors'] & {\n    secondary: string;\n    navBar: string;\n    sidePanel: string;\n    inspectorPanel: string;\n  },\n  fonts: configureFonts(fontConfig),\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const colorScheme = useColorScheme();\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\n  const theme = useMemo(() => customTheme, []);\n\n  return (\n    <PaperProvider theme={theme}>\n      {children}\n    </PaperProvider>\n  );\n};\n\nexport default ThemeProvider;\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component RegisterTool located at path: services/registration/RegisterTool.ts. Purpose of the component: API for registering tools/modes in the NavBar. Type: util.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: components/ThemeProvider.tsx\n        ================================\n        import React, { ReactNode, useMemo } from 'react';\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n};\n\nconst customTheme: Theme = {\n  ...DefaultTheme,\n  roundness: 8,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#1976D2',\n    accent: '#FF4081',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#212121',\n    disabled: '#BDBDBD',\n    placeholder: '#757575',\n    notification: '#FF4081',\n    secondary: '#424242',\n    navBar: '#263238',\n    sidePanel: '#ECEFF1',\n    inspectorPanel: '#FAFAFA',\n  } as Theme['colors'] & {\n    secondary: string;\n    navBar: string;\n    sidePanel: string;\n    inspectorPanel: string;\n  },\n  fonts: configureFonts(fontConfig),\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const colorScheme = useColorScheme();\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\n  const theme = useMemo(() => customTheme, []);\n\n  return (\n    <PaperProvider theme={theme}>\n      {children}\n    </PaperProvider>\n  );\n};\n\nexport default ThemeProvider;\n\n================================\n          File: hooks/usePluginRegistry.ts\n        ================================\n        import { useEffect, useState } from 'react';\nimport { PluginRegistry } from '../services/PluginRegistry';\nimport type {\n  ToolRegistration,\n  SidePanelRegistration,\n  MainContentRegistration,\n  InspectorRegistration,\n} from '../services/PluginRegistry';\n\ninterface UsePluginRegistryResult {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\n/**\n * React hook to access and subscribe to PluginRegistry updates.\n * Returns the current registry state and updates on any change.\n */\nexport function usePluginRegistry(): UsePluginRegistryResult {\n  const [state, setState] = useState(PluginRegistry.getState());\n\n  useEffect(() => {\n    const unsubscribe = PluginRegistry.subscribe(setState);\n    return unsubscribe;\n  }, []);\n\n  return state;\n}\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component RegisterSidePanel located at path: services/registration/RegisterSidePanel.ts. Purpose of the component: API for registering contextual panels in the SidePanel. Type: util.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: components/ThemeProvider.tsx\n        ================================\n        import React, { ReactNode, useMemo } from 'react';\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n};\n\nconst customTheme: Theme = {\n  ...DefaultTheme,\n  roundness: 8,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#1976D2',\n    accent: '#FF4081',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#212121',\n    disabled: '#BDBDBD',\n    placeholder: '#757575',\n    notification: '#FF4081',\n    secondary: '#424242',\n    navBar: '#263238',\n    sidePanel: '#ECEFF1',\n    inspectorPanel: '#FAFAFA',\n  } as Theme['colors'] & {\n    secondary: string;\n    navBar: string;\n    sidePanel: string;\n    inspectorPanel: string;\n  },\n  fonts: configureFonts(fontConfig),\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const colorScheme = useColorScheme();\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\n  const theme = useMemo(() => customTheme, []);\n\n  return (\n    <PaperProvider theme={theme}>\n      {children}\n    </PaperProvider>\n  );\n};\n\nexport default ThemeProvider;\n\n================================\n          File: hooks/usePluginRegistry.ts\n        ================================\n        import { useEffect, useState } from 'react';\nimport { PluginRegistry } from '../services/PluginRegistry';\nimport type {\n  ToolRegistration,\n  SidePanelRegistration,\n  MainContentRegistration,\n  InspectorRegistration,\n} from '../services/PluginRegistry';\n\ninterface UsePluginRegistryResult {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\n/**\n * React hook to access and subscribe to PluginRegistry updates.\n * Returns the current registry state and updates on any change.\n */\nexport function usePluginRegistry(): UsePluginRegistryResult {\n  const [state, setState] = useState(PluginRegistry.getState());\n\n  useEffect(() => {\n    const unsubscribe = PluginRegistry.subscribe(setState);\n    return unsubscribe;\n  }, []);\n\n  return state;\n}\n\n================================\n          File: services/registration/RegisterTool.ts\n        ================================\n        import { PluginRegistry, ToolRegistration } from '../PluginRegistry';\n\n/**\n * Registers a tool/mode in the NavBar.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate key is used.\n *\n * @param tool ToolRegistration object\n */\nexport function registerTool(tool: ToolRegistration): void {\n  if (!tool || typeof tool !== 'object') {\n    throw new Error('Tool registration must be an object');\n  }\n  if (!tool.key || typeof tool.key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  if (!tool.label || typeof tool.label !== 'string') {\n    throw new Error('Tool label is required and must be a string');\n  }\n  if (!tool.icon || typeof tool.icon !== 'string') {\n    throw new Error('Tool icon is required and must be a string');\n  }\n  if (!tool.component || typeof tool.component !== 'function') {\n    throw new Error('Tool component is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getTool(tool.key);\n  if (\n    existing &&\n    existing.label === tool.label &&\n    existing.icon === tool.icon &&\n    existing.component === tool.component\n  ) {\n    return;\n  }\n  PluginRegistry.registerTool(tool);\n}\n\n/**\n * Deregisters a tool/mode from the NavBar by key.\n * @param key Tool key\n */\nexport function deregisterTool(key: string): void {\n  if (!key || typeof key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  PluginRegistry.deregisterTool(key);\n}\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component RegisterMainContent located at path: services/registration/RegisterMainContent.ts. Purpose of the component: API for registering main content views in MainContentArea. Type: util.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: components/ThemeProvider.tsx\n        ================================\n        import React, { ReactNode, useMemo } from 'react';\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n};\n\nconst customTheme: Theme = {\n  ...DefaultTheme,\n  roundness: 8,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#1976D2',\n    accent: '#FF4081',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#212121',\n    disabled: '#BDBDBD',\n    placeholder: '#757575',\n    notification: '#FF4081',\n    secondary: '#424242',\n    navBar: '#263238',\n    sidePanel: '#ECEFF1',\n    inspectorPanel: '#FAFAFA',\n  } as Theme['colors'] & {\n    secondary: string;\n    navBar: string;\n    sidePanel: string;\n    inspectorPanel: string;\n  },\n  fonts: configureFonts(fontConfig),\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const colorScheme = useColorScheme();\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\n  const theme = useMemo(() => customTheme, []);\n\n  return (\n    <PaperProvider theme={theme}>\n      {children}\n    </PaperProvider>\n  );\n};\n\nexport default ThemeProvider;\n\n================================\n          File: hooks/usePluginRegistry.ts\n        ================================\n        import { useEffect, useState } from 'react';\nimport { PluginRegistry } from '../services/PluginRegistry';\nimport type {\n  ToolRegistration,\n  SidePanelRegistration,\n  MainContentRegistration,\n  InspectorRegistration,\n} from '../services/PluginRegistry';\n\ninterface UsePluginRegistryResult {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\n/**\n * React hook to access and subscribe to PluginRegistry updates.\n * Returns the current registry state and updates on any change.\n */\nexport function usePluginRegistry(): UsePluginRegistryResult {\n  const [state, setState] = useState(PluginRegistry.getState());\n\n  useEffect(() => {\n    const unsubscribe = PluginRegistry.subscribe(setState);\n    return unsubscribe;\n  }, []);\n\n  return state;\n}\n\n================================\n          File: services/registration/RegisterTool.ts\n        ================================\n        import { PluginRegistry, ToolRegistration } from '../PluginRegistry';\n\n/**\n * Registers a tool/mode in the NavBar.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate key is used.\n *\n * @param tool ToolRegistration object\n */\nexport function registerTool(tool: ToolRegistration): void {\n  if (!tool || typeof tool !== 'object') {\n    throw new Error('Tool registration must be an object');\n  }\n  if (!tool.key || typeof tool.key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  if (!tool.label || typeof tool.label !== 'string') {\n    throw new Error('Tool label is required and must be a string');\n  }\n  if (!tool.icon || typeof tool.icon !== 'string') {\n    throw new Error('Tool icon is required and must be a string');\n  }\n  if (!tool.component || typeof tool.component !== 'function') {\n    throw new Error('Tool component is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getTool(tool.key);\n  if (\n    existing &&\n    existing.label === tool.label &&\n    existing.icon === tool.icon &&\n    existing.component === tool.component\n  ) {\n    return;\n  }\n  PluginRegistry.registerTool(tool);\n}\n\n/**\n * Deregisters a tool/mode from the NavBar by key.\n * @param key Tool key\n */\nexport function deregisterTool(key: string): void {\n  if (!key || typeof key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  PluginRegistry.deregisterTool(key);\n}\n\n================================\n          File: services/registration/RegisterSidePanel.ts\n        ================================\n        import { PluginRegistry, SidePanelRegistration } from '../PluginRegistry';\n\n/**\n * Registers a contextual panel for a tool in the SidePanel.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param panel SidePanelRegistration object\n */\nexport function registerSidePanel(panel: SidePanelRegistration): void {\n  if (!panel || typeof panel !== 'object') {\n    throw new Error('SidePanel registration must be an object');\n  }\n  if (!panel.toolKey || typeof panel.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!panel.panelComponent || typeof panel.panelComponent !== 'function') {\n    throw new Error('panelComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getSidePanel(panel.toolKey);\n  if (\n    existing &&\n    existing.panelComponent === panel.panelComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerSidePanel(panel);\n}\n\n/**\n * Deregisters a contextual panel from the SidePanel by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterSidePanel(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterSidePanel(toolKey);\n}\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component RegisterInspector located at path: services/registration/RegisterInspector.ts. Purpose of the component: API for registering inspector panels for context types. Type: util.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: components/ThemeProvider.tsx\n        ================================\n        import React, { ReactNode, useMemo } from 'react';\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n};\n\nconst customTheme: Theme = {\n  ...DefaultTheme,\n  roundness: 8,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#1976D2',\n    accent: '#FF4081',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#212121',\n    disabled: '#BDBDBD',\n    placeholder: '#757575',\n    notification: '#FF4081',\n    secondary: '#424242',\n    navBar: '#263238',\n    sidePanel: '#ECEFF1',\n    inspectorPanel: '#FAFAFA',\n  } as Theme['colors'] & {\n    secondary: string;\n    navBar: string;\n    sidePanel: string;\n    inspectorPanel: string;\n  },\n  fonts: configureFonts(fontConfig),\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const colorScheme = useColorScheme();\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\n  const theme = useMemo(() => customTheme, []);\n\n  return (\n    <PaperProvider theme={theme}>\n      {children}\n    </PaperProvider>\n  );\n};\n\nexport default ThemeProvider;\n\n================================\n          File: hooks/usePluginRegistry.ts\n        ================================\n        import { useEffect, useState } from 'react';\nimport { PluginRegistry } from '../services/PluginRegistry';\nimport type {\n  ToolRegistration,\n  SidePanelRegistration,\n  MainContentRegistration,\n  InspectorRegistration,\n} from '../services/PluginRegistry';\n\ninterface UsePluginRegistryResult {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\n/**\n * React hook to access and subscribe to PluginRegistry updates.\n * Returns the current registry state and updates on any change.\n */\nexport function usePluginRegistry(): UsePluginRegistryResult {\n  const [state, setState] = useState(PluginRegistry.getState());\n\n  useEffect(() => {\n    const unsubscribe = PluginRegistry.subscribe(setState);\n    return unsubscribe;\n  }, []);\n\n  return state;\n}\n\n================================\n          File: services/registration/RegisterTool.ts\n        ================================\n        import { PluginRegistry, ToolRegistration } from '../PluginRegistry';\n\n/**\n * Registers a tool/mode in the NavBar.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate key is used.\n *\n * @param tool ToolRegistration object\n */\nexport function registerTool(tool: ToolRegistration): void {\n  if (!tool || typeof tool !== 'object') {\n    throw new Error('Tool registration must be an object');\n  }\n  if (!tool.key || typeof tool.key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  if (!tool.label || typeof tool.label !== 'string') {\n    throw new Error('Tool label is required and must be a string');\n  }\n  if (!tool.icon || typeof tool.icon !== 'string') {\n    throw new Error('Tool icon is required and must be a string');\n  }\n  if (!tool.component || typeof tool.component !== 'function') {\n    throw new Error('Tool component is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getTool(tool.key);\n  if (\n    existing &&\n    existing.label === tool.label &&\n    existing.icon === tool.icon &&\n    existing.component === tool.component\n  ) {\n    return;\n  }\n  PluginRegistry.registerTool(tool);\n}\n\n/**\n * Deregisters a tool/mode from the NavBar by key.\n * @param key Tool key\n */\nexport function deregisterTool(key: string): void {\n  if (!key || typeof key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  PluginRegistry.deregisterTool(key);\n}\n\n================================\n          File: services/registration/RegisterSidePanel.ts\n        ================================\n        import { PluginRegistry, SidePanelRegistration } from '../PluginRegistry';\n\n/**\n * Registers a contextual panel for a tool in the SidePanel.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param panel SidePanelRegistration object\n */\nexport function registerSidePanel(panel: SidePanelRegistration): void {\n  if (!panel || typeof panel !== 'object') {\n    throw new Error('SidePanel registration must be an object');\n  }\n  if (!panel.toolKey || typeof panel.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!panel.panelComponent || typeof panel.panelComponent !== 'function') {\n    throw new Error('panelComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getSidePanel(panel.toolKey);\n  if (\n    existing &&\n    existing.panelComponent === panel.panelComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerSidePanel(panel);\n}\n\n/**\n * Deregisters a contextual panel from the SidePanel by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterSidePanel(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterSidePanel(toolKey);\n}\n\n================================\n          File: services/registration/RegisterMainContent.ts\n        ================================\n        import { PluginRegistry, MainContentRegistration } from '../PluginRegistry';\n\n/**\n * Registers a main content view for a tool in the MainContentArea.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param content MainContentRegistration object\n */\nexport function registerMainContent(content: MainContentRegistration): void {\n  if (!content || typeof content !== 'object') {\n    throw new Error('MainContent registration must be an object');\n  }\n  if (!content.toolKey || typeof content.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!content.contentComponent || typeof content.contentComponent !== 'function') {\n    throw new Error('contentComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getMainContent(content.toolKey);\n  if (\n    existing &&\n    existing.contentComponent === content.contentComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerMainContent(content);\n}\n\n/**\n * Deregisters a main content view from the MainContentArea by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterMainContent(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterMainContent(toolKey);\n}\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component NavBar located at path: components/NavBar.tsx. Purpose of the component: Vertical toolbar for tool/mode selection, populated via registration. Type: ui_component.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: components/ThemeProvider.tsx\n        ================================\n        import React, { ReactNode, useMemo } from 'react';\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n};\n\nconst customTheme: Theme = {\n  ...DefaultTheme,\n  roundness: 8,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#1976D2',\n    accent: '#FF4081',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#212121',\n    disabled: '#BDBDBD',\n    placeholder: '#757575',\n    notification: '#FF4081',\n    secondary: '#424242',\n    navBar: '#263238',\n    sidePanel: '#ECEFF1',\n    inspectorPanel: '#FAFAFA',\n  } as Theme['colors'] & {\n    secondary: string;\n    navBar: string;\n    sidePanel: string;\n    inspectorPanel: string;\n  },\n  fonts: configureFonts(fontConfig),\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const colorScheme = useColorScheme();\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\n  const theme = useMemo(() => customTheme, []);\n\n  return (\n    <PaperProvider theme={theme}>\n      {children}\n    </PaperProvider>\n  );\n};\n\nexport default ThemeProvider;\n\n================================\n          File: hooks/usePluginRegistry.ts\n        ================================\n        import { useEffect, useState } from 'react';\nimport { PluginRegistry } from '../services/PluginRegistry';\nimport type {\n  ToolRegistration,\n  SidePanelRegistration,\n  MainContentRegistration,\n  InspectorRegistration,\n} from '../services/PluginRegistry';\n\ninterface UsePluginRegistryResult {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\n/**\n * React hook to access and subscribe to PluginRegistry updates.\n * Returns the current registry state and updates on any change.\n */\nexport function usePluginRegistry(): UsePluginRegistryResult {\n  const [state, setState] = useState(PluginRegistry.getState());\n\n  useEffect(() => {\n    const unsubscribe = PluginRegistry.subscribe(setState);\n    return unsubscribe;\n  }, []);\n\n  return state;\n}\n\n================================\n          File: services/registration/RegisterTool.ts\n        ================================\n        import { PluginRegistry, ToolRegistration } from '../PluginRegistry';\n\n/**\n * Registers a tool/mode in the NavBar.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate key is used.\n *\n * @param tool ToolRegistration object\n */\nexport function registerTool(tool: ToolRegistration): void {\n  if (!tool || typeof tool !== 'object') {\n    throw new Error('Tool registration must be an object');\n  }\n  if (!tool.key || typeof tool.key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  if (!tool.label || typeof tool.label !== 'string') {\n    throw new Error('Tool label is required and must be a string');\n  }\n  if (!tool.icon || typeof tool.icon !== 'string') {\n    throw new Error('Tool icon is required and must be a string');\n  }\n  if (!tool.component || typeof tool.component !== 'function') {\n    throw new Error('Tool component is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getTool(tool.key);\n  if (\n    existing &&\n    existing.label === tool.label &&\n    existing.icon === tool.icon &&\n    existing.component === tool.component\n  ) {\n    return;\n  }\n  PluginRegistry.registerTool(tool);\n}\n\n/**\n * Deregisters a tool/mode from the NavBar by key.\n * @param key Tool key\n */\nexport function deregisterTool(key: string): void {\n  if (!key || typeof key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  PluginRegistry.deregisterTool(key);\n}\n\n================================\n          File: services/registration/RegisterSidePanel.ts\n        ================================\n        import { PluginRegistry, SidePanelRegistration } from '../PluginRegistry';\n\n/**\n * Registers a contextual panel for a tool in the SidePanel.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param panel SidePanelRegistration object\n */\nexport function registerSidePanel(panel: SidePanelRegistration): void {\n  if (!panel || typeof panel !== 'object') {\n    throw new Error('SidePanel registration must be an object');\n  }\n  if (!panel.toolKey || typeof panel.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!panel.panelComponent || typeof panel.panelComponent !== 'function') {\n    throw new Error('panelComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getSidePanel(panel.toolKey);\n  if (\n    existing &&\n    existing.panelComponent === panel.panelComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerSidePanel(panel);\n}\n\n/**\n * Deregisters a contextual panel from the SidePanel by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterSidePanel(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterSidePanel(toolKey);\n}\n\n================================\n          File: services/registration/RegisterMainContent.ts\n        ================================\n        import { PluginRegistry, MainContentRegistration } from '../PluginRegistry';\n\n/**\n * Registers a main content view for a tool in the MainContentArea.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param content MainContentRegistration object\n */\nexport function registerMainContent(content: MainContentRegistration): void {\n  if (!content || typeof content !== 'object') {\n    throw new Error('MainContent registration must be an object');\n  }\n  if (!content.toolKey || typeof content.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!content.contentComponent || typeof content.contentComponent !== 'function') {\n    throw new Error('contentComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getMainContent(content.toolKey);\n  if (\n    existing &&\n    existing.contentComponent === content.contentComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerMainContent(content);\n}\n\n/**\n * Deregisters a main content view from the MainContentArea by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterMainContent(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterMainContent(toolKey);\n}\n\n================================\n          File: services/registration/RegisterInspector.ts\n        ================================\n        import { PluginRegistry, InspectorRegistration } from '../PluginRegistry';\n\n/**\n * Registers an inspector panel for a given context type.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param inspector InspectorRegistration object\n */\nexport function registerInspector(inspector: InspectorRegistration): void {\n  if (!inspector || typeof inspector !== 'object') {\n    throw new Error('Inspector registration must be an object');\n  }\n  if (!inspector.contextType || typeof inspector.contextType !== 'string') {\n    throw new Error('contextType is required and must be a string');\n  }\n  if (!inspector.inspectorComponent || typeof inspector.inspectorComponent !== 'function') {\n    throw new Error('inspectorComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getInspector(inspector.contextType);\n  if (\n    existing &&\n    existing.inspectorComponent === inspector.inspectorComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerInspector(inspector);\n}\n\n/**\n * Deregisters an inspector panel for a given context type.\n * @param contextType Context type string\n */\nexport function deregisterInspector(contextType: string): void {\n  if (!contextType || typeof contextType !== 'string') {\n    throw new Error('contextType is required and must be a string');\n  }\n  PluginRegistry.deregisterInspector(contextType);\n}\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component SidePanel located at path: components/SidePanel.tsx. Purpose of the component: Contextual left panel, content changes per active tool. Type: ui_component.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: components/ThemeProvider.tsx\n        ================================\n        import React, { ReactNode, useMemo } from 'react';\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n};\n\nconst customTheme: Theme = {\n  ...DefaultTheme,\n  roundness: 8,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#1976D2',\n    accent: '#FF4081',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#212121',\n    disabled: '#BDBDBD',\n    placeholder: '#757575',\n    notification: '#FF4081',\n    secondary: '#424242',\n    navBar: '#263238',\n    sidePanel: '#ECEFF1',\n    inspectorPanel: '#FAFAFA',\n  } as Theme['colors'] & {\n    secondary: string;\n    navBar: string;\n    sidePanel: string;\n    inspectorPanel: string;\n  },\n  fonts: configureFonts(fontConfig),\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const colorScheme = useColorScheme();\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\n  const theme = useMemo(() => customTheme, []);\n\n  return (\n    <PaperProvider theme={theme}>\n      {children}\n    </PaperProvider>\n  );\n};\n\nexport default ThemeProvider;\n\n================================\n          File: hooks/usePluginRegistry.ts\n        ================================\n        import { useEffect, useState } from 'react';\nimport { PluginRegistry } from '../services/PluginRegistry';\nimport type {\n  ToolRegistration,\n  SidePanelRegistration,\n  MainContentRegistration,\n  InspectorRegistration,\n} from '../services/PluginRegistry';\n\ninterface UsePluginRegistryResult {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\n/**\n * React hook to access and subscribe to PluginRegistry updates.\n * Returns the current registry state and updates on any change.\n */\nexport function usePluginRegistry(): UsePluginRegistryResult {\n  const [state, setState] = useState(PluginRegistry.getState());\n\n  useEffect(() => {\n    const unsubscribe = PluginRegistry.subscribe(setState);\n    return unsubscribe;\n  }, []);\n\n  return state;\n}\n\n================================\n          File: services/registration/RegisterTool.ts\n        ================================\n        import { PluginRegistry, ToolRegistration } from '../PluginRegistry';\n\n/**\n * Registers a tool/mode in the NavBar.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate key is used.\n *\n * @param tool ToolRegistration object\n */\nexport function registerTool(tool: ToolRegistration): void {\n  if (!tool || typeof tool !== 'object') {\n    throw new Error('Tool registration must be an object');\n  }\n  if (!tool.key || typeof tool.key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  if (!tool.label || typeof tool.label !== 'string') {\n    throw new Error('Tool label is required and must be a string');\n  }\n  if (!tool.icon || typeof tool.icon !== 'string') {\n    throw new Error('Tool icon is required and must be a string');\n  }\n  if (!tool.component || typeof tool.component !== 'function') {\n    throw new Error('Tool component is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getTool(tool.key);\n  if (\n    existing &&\n    existing.label === tool.label &&\n    existing.icon === tool.icon &&\n    existing.component === tool.component\n  ) {\n    return;\n  }\n  PluginRegistry.registerTool(tool);\n}\n\n/**\n * Deregisters a tool/mode from the NavBar by key.\n * @param key Tool key\n */\nexport function deregisterTool(key: string): void {\n  if (!key || typeof key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  PluginRegistry.deregisterTool(key);\n}\n\n================================\n          File: services/registration/RegisterSidePanel.ts\n        ================================\n        import { PluginRegistry, SidePanelRegistration } from '../PluginRegistry';\n\n/**\n * Registers a contextual panel for a tool in the SidePanel.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param panel SidePanelRegistration object\n */\nexport function registerSidePanel(panel: SidePanelRegistration): void {\n  if (!panel || typeof panel !== 'object') {\n    throw new Error('SidePanel registration must be an object');\n  }\n  if (!panel.toolKey || typeof panel.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!panel.panelComponent || typeof panel.panelComponent !== 'function') {\n    throw new Error('panelComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getSidePanel(panel.toolKey);\n  if (\n    existing &&\n    existing.panelComponent === panel.panelComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerSidePanel(panel);\n}\n\n/**\n * Deregisters a contextual panel from the SidePanel by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterSidePanel(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterSidePanel(toolKey);\n}\n\n================================\n          File: services/registration/RegisterMainContent.ts\n        ================================\n        import { PluginRegistry, MainContentRegistration } from '../PluginRegistry';\n\n/**\n * Registers a main content view for a tool in the MainContentArea.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param content MainContentRegistration object\n */\nexport function registerMainContent(content: MainContentRegistration): void {\n  if (!content || typeof content !== 'object') {\n    throw new Error('MainContent registration must be an object');\n  }\n  if (!content.toolKey || typeof content.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!content.contentComponent || typeof content.contentComponent !== 'function') {\n    throw new Error('contentComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getMainContent(content.toolKey);\n  if (\n    existing &&\n    existing.contentComponent === content.contentComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerMainContent(content);\n}\n\n/**\n * Deregisters a main content view from the MainContentArea by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterMainContent(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterMainContent(toolKey);\n}\n\n================================\n          File: services/registration/RegisterInspector.ts\n        ================================\n        import { PluginRegistry, InspectorRegistration } from '../PluginRegistry';\n\n/**\n * Registers an inspector panel for a given context type.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param inspector InspectorRegistration object\n */\nexport function registerInspector(inspector: InspectorRegistration): void {\n  if (!inspector || typeof inspector !== 'object') {\n    throw new Error('Inspector registration must be an object');\n  }\n  if (!inspector.contextType || typeof inspector.contextType !== 'string') {\n    throw new Error('contextType is required and must be a string');\n  }\n  if (!inspector.inspectorComponent || typeof inspector.inspectorComponent !== 'function') {\n    throw new Error('inspectorComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getInspector(inspector.contextType);\n  if (\n    existing &&\n    existing.inspectorComponent === inspector.inspectorComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerInspector(inspector);\n}\n\n/**\n * Deregisters an inspector panel for a given context type.\n * @param contextType Context type string\n */\nexport function deregisterInspector(contextType: string): void {\n  if (!contextType || typeof contextType !== 'string') {\n    throw new Error('contextType is required and must be a string');\n  }\n  PluginRegistry.deregisterInspector(contextType);\n}\n\n================================\n          File: components/NavBar.tsx\n        ================================\n        import React, { useCallback } from 'react';\nimport { View, StyleSheet, ScrollView, TouchableOpacity, AccessibilityRole } from 'react-native';\nimport { useTheme, IconButton, Tooltip } from 'react-native-paper';\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\nimport { useUIStore } from '../store/zustandStore';\n\nconst NAVBAR_WIDTH = 64;\n\nconst NavBar: React.FC = () => {\n  const theme = useTheme();\n  const { tools } = usePluginRegistry();\n  const toolList = Object.values(tools);\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\n  const setActiveToolKey = useUIStore((state) => state.setActiveToolKey);\n\n  const handleToolPress = useCallback(\n    (key: string) => {\n      if (activeToolKey !== key) {\n        setActiveToolKey(key);\n      }\n    },\n    [activeToolKey, setActiveToolKey]\n  );\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: theme.colors.navBar, borderRightColor: theme.colors.surface },\n      ]}\n      accessibilityRole=\"navigation\"\n      accessibilityLabel=\"Main Navigation Bar\"\n    >\n      <ScrollView\n        contentContainerStyle={styles.scrollContainer}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n      >\n        {toolList.length === 0 ? (\n          <View style={styles.emptyState}>\n            <MaterialCommunityIcons name=\"plus-box-outline\" size={32} color={theme.colors.disabled} />\n          </View>\n        ) : (\n          toolList.map((tool) => (\n            <Tooltip key={tool.key} title={tool.label} enterTouchDelay={0}>\n              <TouchableOpacity\n                accessibilityRole=\"button\" as={AccessibilityRole}\n                accessibilityLabel={tool.label}\n                accessibilityState={{ selected: activeToolKey === tool.key }}\n                onPress={() => handleToolPress(tool.key)}\n                style={[\n                  styles.iconButton,\n                  activeToolKey === tool.key && {\n                    backgroundColor: theme.colors.primary + '22',\n                  },\n                ]}\n                testID={`navbar-tool-${tool.key}`}\n              >\n                <MaterialCommunityIcons\n                  name={tool.icon}\n                  size={28}\n                  color={activeToolKey === tool.key ? theme.colors.primary : theme.colors.disabled}\n                  accessibilityLabel={tool.label}\n                />\n              </TouchableOpacity>\n            </Tooltip>\n          ))\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: NAVBAR_WIDTH,\n    minWidth: NAVBAR_WIDTH,\n    maxWidth: NAVBAR_WIDTH,\n    height: '100%',\n    borderRightWidth: 1,\n    alignItems: 'center',\n    paddingTop: 16,\n    paddingBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 1, height: 0 },\n    shadowOpacity: 0.04,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  scrollContainer: {\n    alignItems: 'center',\n    gap: 8,\n  },\n  iconButton: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    marginVertical: 4,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  emptyState: {\n    marginTop: 32,\n    alignItems: 'center',\n    opacity: 0.5,\n  },\n});\n\nexport default NavBar;\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component MainContentArea located at path: components/MainContentArea.tsx. Purpose of the component: Central workspace, displays main editors/content per tool. Type: ui_component.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: components/ThemeProvider.tsx\n        ================================\n        import React, { ReactNode, useMemo } from 'react';\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n};\n\nconst customTheme: Theme = {\n  ...DefaultTheme,\n  roundness: 8,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#1976D2',\n    accent: '#FF4081',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#212121',\n    disabled: '#BDBDBD',\n    placeholder: '#757575',\n    notification: '#FF4081',\n    secondary: '#424242',\n    navBar: '#263238',\n    sidePanel: '#ECEFF1',\n    inspectorPanel: '#FAFAFA',\n  } as Theme['colors'] & {\n    secondary: string;\n    navBar: string;\n    sidePanel: string;\n    inspectorPanel: string;\n  },\n  fonts: configureFonts(fontConfig),\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const colorScheme = useColorScheme();\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\n  const theme = useMemo(() => customTheme, []);\n\n  return (\n    <PaperProvider theme={theme}>\n      {children}\n    </PaperProvider>\n  );\n};\n\nexport default ThemeProvider;\n\n================================\n          File: hooks/usePluginRegistry.ts\n        ================================\n        import { useEffect, useState } from 'react';\nimport { PluginRegistry } from '../services/PluginRegistry';\nimport type {\n  ToolRegistration,\n  SidePanelRegistration,\n  MainContentRegistration,\n  InspectorRegistration,\n} from '../services/PluginRegistry';\n\ninterface UsePluginRegistryResult {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\n/**\n * React hook to access and subscribe to PluginRegistry updates.\n * Returns the current registry state and updates on any change.\n */\nexport function usePluginRegistry(): UsePluginRegistryResult {\n  const [state, setState] = useState(PluginRegistry.getState());\n\n  useEffect(() => {\n    const unsubscribe = PluginRegistry.subscribe(setState);\n    return unsubscribe;\n  }, []);\n\n  return state;\n}\n\n================================\n          File: services/registration/RegisterTool.ts\n        ================================\n        import { PluginRegistry, ToolRegistration } from '../PluginRegistry';\n\n/**\n * Registers a tool/mode in the NavBar.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate key is used.\n *\n * @param tool ToolRegistration object\n */\nexport function registerTool(tool: ToolRegistration): void {\n  if (!tool || typeof tool !== 'object') {\n    throw new Error('Tool registration must be an object');\n  }\n  if (!tool.key || typeof tool.key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  if (!tool.label || typeof tool.label !== 'string') {\n    throw new Error('Tool label is required and must be a string');\n  }\n  if (!tool.icon || typeof tool.icon !== 'string') {\n    throw new Error('Tool icon is required and must be a string');\n  }\n  if (!tool.component || typeof tool.component !== 'function') {\n    throw new Error('Tool component is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getTool(tool.key);\n  if (\n    existing &&\n    existing.label === tool.label &&\n    existing.icon === tool.icon &&\n    existing.component === tool.component\n  ) {\n    return;\n  }\n  PluginRegistry.registerTool(tool);\n}\n\n/**\n * Deregisters a tool/mode from the NavBar by key.\n * @param key Tool key\n */\nexport function deregisterTool(key: string): void {\n  if (!key || typeof key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  PluginRegistry.deregisterTool(key);\n}\n\n================================\n          File: services/registration/RegisterSidePanel.ts\n        ================================\n        import { PluginRegistry, SidePanelRegistration } from '../PluginRegistry';\n\n/**\n * Registers a contextual panel for a tool in the SidePanel.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param panel SidePanelRegistration object\n */\nexport function registerSidePanel(panel: SidePanelRegistration): void {\n  if (!panel || typeof panel !== 'object') {\n    throw new Error('SidePanel registration must be an object');\n  }\n  if (!panel.toolKey || typeof panel.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!panel.panelComponent || typeof panel.panelComponent !== 'function') {\n    throw new Error('panelComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getSidePanel(panel.toolKey);\n  if (\n    existing &&\n    existing.panelComponent === panel.panelComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerSidePanel(panel);\n}\n\n/**\n * Deregisters a contextual panel from the SidePanel by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterSidePanel(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterSidePanel(toolKey);\n}\n\n================================\n          File: services/registration/RegisterMainContent.ts\n        ================================\n        import { PluginRegistry, MainContentRegistration } from '../PluginRegistry';\n\n/**\n * Registers a main content view for a tool in the MainContentArea.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param content MainContentRegistration object\n */\nexport function registerMainContent(content: MainContentRegistration): void {\n  if (!content || typeof content !== 'object') {\n    throw new Error('MainContent registration must be an object');\n  }\n  if (!content.toolKey || typeof content.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!content.contentComponent || typeof content.contentComponent !== 'function') {\n    throw new Error('contentComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getMainContent(content.toolKey);\n  if (\n    existing &&\n    existing.contentComponent === content.contentComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerMainContent(content);\n}\n\n/**\n * Deregisters a main content view from the MainContentArea by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterMainContent(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterMainContent(toolKey);\n}\n\n================================\n          File: services/registration/RegisterInspector.ts\n        ================================\n        import { PluginRegistry, InspectorRegistration } from '../PluginRegistry';\n\n/**\n * Registers an inspector panel for a given context type.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param inspector InspectorRegistration object\n */\nexport function registerInspector(inspector: InspectorRegistration): void {\n  if (!inspector || typeof inspector !== 'object') {\n    throw new Error('Inspector registration must be an object');\n  }\n  if (!inspector.contextType || typeof inspector.contextType !== 'string') {\n    throw new Error('contextType is required and must be a string');\n  }\n  if (!inspector.inspectorComponent || typeof inspector.inspectorComponent !== 'function') {\n    throw new Error('inspectorComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getInspector(inspector.contextType);\n  if (\n    existing &&\n    existing.inspectorComponent === inspector.inspectorComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerInspector(inspector);\n}\n\n/**\n * Deregisters an inspector panel for a given context type.\n * @param contextType Context type string\n */\nexport function deregisterInspector(contextType: string): void {\n  if (!contextType || typeof contextType !== 'string') {\n    throw new Error('contextType is required and must be a string');\n  }\n  PluginRegistry.deregisterInspector(contextType);\n}\n\n================================\n          File: components/NavBar.tsx\n        ================================\n        import React, { useCallback } from 'react';\nimport { View, StyleSheet, ScrollView, TouchableOpacity, AccessibilityRole } from 'react-native';\nimport { useTheme, IconButton, Tooltip } from 'react-native-paper';\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\nimport { useUIStore } from '../store/zustandStore';\n\nconst NAVBAR_WIDTH = 64;\n\nconst NavBar: React.FC = () => {\n  const theme = useTheme();\n  const { tools } = usePluginRegistry();\n  const toolList = Object.values(tools);\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\n  const setActiveToolKey = useUIStore((state) => state.setActiveToolKey);\n\n  const handleToolPress = useCallback(\n    (key: string) => {\n      if (activeToolKey !== key) {\n        setActiveToolKey(key);\n      }\n    },\n    [activeToolKey, setActiveToolKey]\n  );\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: theme.colors.navBar, borderRightColor: theme.colors.surface },\n      ]}\n      accessibilityRole=\"navigation\"\n      accessibilityLabel=\"Main Navigation Bar\"\n    >\n      <ScrollView\n        contentContainerStyle={styles.scrollContainer}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n      >\n        {toolList.length === 0 ? (\n          <View style={styles.emptyState}>\n            <MaterialCommunityIcons name=\"plus-box-outline\" size={32} color={theme.colors.disabled} />\n          </View>\n        ) : (\n          toolList.map((tool) => (\n            <Tooltip key={tool.key} title={tool.label} enterTouchDelay={0}>\n              <TouchableOpacity\n                accessibilityRole=\"button\" as={AccessibilityRole}\n                accessibilityLabel={tool.label}\n                accessibilityState={{ selected: activeToolKey === tool.key }}\n                onPress={() => handleToolPress(tool.key)}\n                style={[\n                  styles.iconButton,\n                  activeToolKey === tool.key && {\n                    backgroundColor: theme.colors.primary + '22',\n                  },\n                ]}\n                testID={`navbar-tool-${tool.key}`}\n              >\n                <MaterialCommunityIcons\n                  name={tool.icon}\n                  size={28}\n                  color={activeToolKey === tool.key ? theme.colors.primary : theme.colors.disabled}\n                  accessibilityLabel={tool.label}\n                />\n              </TouchableOpacity>\n            </Tooltip>\n          ))\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: NAVBAR_WIDTH,\n    minWidth: NAVBAR_WIDTH,\n    maxWidth: NAVBAR_WIDTH,\n    height: '100%',\n    borderRightWidth: 1,\n    alignItems: 'center',\n    paddingTop: 16,\n    paddingBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 1, height: 0 },\n    shadowOpacity: 0.04,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  scrollContainer: {\n    alignItems: 'center',\n    gap: 8,\n  },\n  iconButton: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    marginVertical: 4,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  emptyState: {\n    marginTop: 32,\n    alignItems: 'center',\n    opacity: 0.5,\n  },\n});\n\nexport default NavBar;\n\n================================\n          File: components/SidePanel.tsx\n        ================================\n        import React, { useMemo } from 'react';\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\nimport { useTheme, Text } from 'react-native-paper';\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\nimport { useUIStore } from '../store/zustandStore';\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\n\nconst SIDEPANEL_WIDTH = 280;\n\nconst SidePanel: React.FC = () => {\n  const theme = useTheme();\n  const { sidePanels } = usePluginRegistry();\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\n\n  // Memoize the panel component for the active tool\n  const PanelComponent = useMemo(() => {\n    if (!activeToolKey) return null;\n    const reg = sidePanels[activeToolKey];\n    return reg ? reg.panelComponent : null;\n  }, [activeToolKey, sidePanels]);\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: theme.colors.sidePanel, borderRightColor: theme.colors.surface },\n      ]}\n      accessibilityRole=\"complementary\" as={AccessibilityRole}\n      accessibilityLabel=\"Side Panel\"\n      testID=\"side-panel\"\n    >\n      {PanelComponent ? (\n        <PanelComponent />\n      ) : (\n        <View style={styles.emptyState}>\n          <MaterialCommunityIcons name=\"view-sidebar-outline\" size={40} color={theme.colors.disabled} />\n          <Text style={[styles.emptyText, { color: theme.colors.disabled }]}>No panel available</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: SIDEPANEL_WIDTH,\n    minWidth: SIDEPANEL_WIDTH,\n    maxWidth: SIDEPANEL_WIDTH,\n    height: '100%',\n    borderRightWidth: 1,\n    paddingTop: 16,\n    paddingBottom: 16,\n    paddingHorizontal: 0,\n    shadowColor: '#000',\n    shadowOffset: { width: 1, height: 0 },\n    shadowOpacity: 0.04,\n    shadowRadius: 2,\n    elevation: 2,\n    justifyContent: 'flex-start',\n  },\n  emptyState: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: 0.6,\n  },\n  emptyText: {\n    marginTop: 12,\n    fontSize: 16,\n    fontWeight: '400',\n    textAlign: 'center',\n  },\n});\n\nexport default SidePanel;\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component InspectorPanel located at path: components/InspectorPanel.tsx. Purpose of the component: Right panel for details/properties/settings, context-aware. Type: ui_component.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: components/ThemeProvider.tsx\n        ================================\n        import React, { ReactNode, useMemo } from 'react';\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n};\n\nconst customTheme: Theme = {\n  ...DefaultTheme,\n  roundness: 8,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#1976D2',\n    accent: '#FF4081',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#212121',\n    disabled: '#BDBDBD',\n    placeholder: '#757575',\n    notification: '#FF4081',\n    secondary: '#424242',\n    navBar: '#263238',\n    sidePanel: '#ECEFF1',\n    inspectorPanel: '#FAFAFA',\n  } as Theme['colors'] & {\n    secondary: string;\n    navBar: string;\n    sidePanel: string;\n    inspectorPanel: string;\n  },\n  fonts: configureFonts(fontConfig),\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const colorScheme = useColorScheme();\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\n  const theme = useMemo(() => customTheme, []);\n\n  return (\n    <PaperProvider theme={theme}>\n      {children}\n    </PaperProvider>\n  );\n};\n\nexport default ThemeProvider;\n\n================================\n          File: hooks/usePluginRegistry.ts\n        ================================\n        import { useEffect, useState } from 'react';\nimport { PluginRegistry } from '../services/PluginRegistry';\nimport type {\n  ToolRegistration,\n  SidePanelRegistration,\n  MainContentRegistration,\n  InspectorRegistration,\n} from '../services/PluginRegistry';\n\ninterface UsePluginRegistryResult {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\n/**\n * React hook to access and subscribe to PluginRegistry updates.\n * Returns the current registry state and updates on any change.\n */\nexport function usePluginRegistry(): UsePluginRegistryResult {\n  const [state, setState] = useState(PluginRegistry.getState());\n\n  useEffect(() => {\n    const unsubscribe = PluginRegistry.subscribe(setState);\n    return unsubscribe;\n  }, []);\n\n  return state;\n}\n\n================================\n          File: services/registration/RegisterTool.ts\n        ================================\n        import { PluginRegistry, ToolRegistration } from '../PluginRegistry';\n\n/**\n * Registers a tool/mode in the NavBar.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate key is used.\n *\n * @param tool ToolRegistration object\n */\nexport function registerTool(tool: ToolRegistration): void {\n  if (!tool || typeof tool !== 'object') {\n    throw new Error('Tool registration must be an object');\n  }\n  if (!tool.key || typeof tool.key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  if (!tool.label || typeof tool.label !== 'string') {\n    throw new Error('Tool label is required and must be a string');\n  }\n  if (!tool.icon || typeof tool.icon !== 'string') {\n    throw new Error('Tool icon is required and must be a string');\n  }\n  if (!tool.component || typeof tool.component !== 'function') {\n    throw new Error('Tool component is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getTool(tool.key);\n  if (\n    existing &&\n    existing.label === tool.label &&\n    existing.icon === tool.icon &&\n    existing.component === tool.component\n  ) {\n    return;\n  }\n  PluginRegistry.registerTool(tool);\n}\n\n/**\n * Deregisters a tool/mode from the NavBar by key.\n * @param key Tool key\n */\nexport function deregisterTool(key: string): void {\n  if (!key || typeof key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  PluginRegistry.deregisterTool(key);\n}\n\n================================\n          File: services/registration/RegisterSidePanel.ts\n        ================================\n        import { PluginRegistry, SidePanelRegistration } from '../PluginRegistry';\n\n/**\n * Registers a contextual panel for a tool in the SidePanel.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param panel SidePanelRegistration object\n */\nexport function registerSidePanel(panel: SidePanelRegistration): void {\n  if (!panel || typeof panel !== 'object') {\n    throw new Error('SidePanel registration must be an object');\n  }\n  if (!panel.toolKey || typeof panel.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!panel.panelComponent || typeof panel.panelComponent !== 'function') {\n    throw new Error('panelComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getSidePanel(panel.toolKey);\n  if (\n    existing &&\n    existing.panelComponent === panel.panelComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerSidePanel(panel);\n}\n\n/**\n * Deregisters a contextual panel from the SidePanel by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterSidePanel(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterSidePanel(toolKey);\n}\n\n================================\n          File: services/registration/RegisterMainContent.ts\n        ================================\n        import { PluginRegistry, MainContentRegistration } from '../PluginRegistry';\n\n/**\n * Registers a main content view for a tool in the MainContentArea.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param content MainContentRegistration object\n */\nexport function registerMainContent(content: MainContentRegistration): void {\n  if (!content || typeof content !== 'object') {\n    throw new Error('MainContent registration must be an object');\n  }\n  if (!content.toolKey || typeof content.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!content.contentComponent || typeof content.contentComponent !== 'function') {\n    throw new Error('contentComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getMainContent(content.toolKey);\n  if (\n    existing &&\n    existing.contentComponent === content.contentComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerMainContent(content);\n}\n\n/**\n * Deregisters a main content view from the MainContentArea by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterMainContent(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterMainContent(toolKey);\n}\n\n================================\n          File: services/registration/RegisterInspector.ts\n        ================================\n        import { PluginRegistry, InspectorRegistration } from '../PluginRegistry';\n\n/**\n * Registers an inspector panel for a given context type.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param inspector InspectorRegistration object\n */\nexport function registerInspector(inspector: InspectorRegistration): void {\n  if (!inspector || typeof inspector !== 'object') {\n    throw new Error('Inspector registration must be an object');\n  }\n  if (!inspector.contextType || typeof inspector.contextType !== 'string') {\n    throw new Error('contextType is required and must be a string');\n  }\n  if (!inspector.inspectorComponent || typeof inspector.inspectorComponent !== 'function') {\n    throw new Error('inspectorComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getInspector(inspector.contextType);\n  if (\n    existing &&\n    existing.inspectorComponent === inspector.inspectorComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerInspector(inspector);\n}\n\n/**\n * Deregisters an inspector panel for a given context type.\n * @param contextType Context type string\n */\nexport function deregisterInspector(contextType: string): void {\n  if (!contextType || typeof contextType !== 'string') {\n    throw new Error('contextType is required and must be a string');\n  }\n  PluginRegistry.deregisterInspector(contextType);\n}\n\n================================\n          File: components/NavBar.tsx\n        ================================\n        import React, { useCallback } from 'react';\nimport { View, StyleSheet, ScrollView, TouchableOpacity, AccessibilityRole } from 'react-native';\nimport { useTheme, IconButton, Tooltip } from 'react-native-paper';\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\nimport { useUIStore } from '../store/zustandStore';\n\nconst NAVBAR_WIDTH = 64;\n\nconst NavBar: React.FC = () => {\n  const theme = useTheme();\n  const { tools } = usePluginRegistry();\n  const toolList = Object.values(tools);\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\n  const setActiveToolKey = useUIStore((state) => state.setActiveToolKey);\n\n  const handleToolPress = useCallback(\n    (key: string) => {\n      if (activeToolKey !== key) {\n        setActiveToolKey(key);\n      }\n    },\n    [activeToolKey, setActiveToolKey]\n  );\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: theme.colors.navBar, borderRightColor: theme.colors.surface },\n      ]}\n      accessibilityRole=\"navigation\"\n      accessibilityLabel=\"Main Navigation Bar\"\n    >\n      <ScrollView\n        contentContainerStyle={styles.scrollContainer}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n      >\n        {toolList.length === 0 ? (\n          <View style={styles.emptyState}>\n            <MaterialCommunityIcons name=\"plus-box-outline\" size={32} color={theme.colors.disabled} />\n          </View>\n        ) : (\n          toolList.map((tool) => (\n            <Tooltip key={tool.key} title={tool.label} enterTouchDelay={0}>\n              <TouchableOpacity\n                accessibilityRole=\"button\" as={AccessibilityRole}\n                accessibilityLabel={tool.label}\n                accessibilityState={{ selected: activeToolKey === tool.key }}\n                onPress={() => handleToolPress(tool.key)}\n                style={[\n                  styles.iconButton,\n                  activeToolKey === tool.key && {\n                    backgroundColor: theme.colors.primary + '22',\n                  },\n                ]}\n                testID={`navbar-tool-${tool.key}`}\n              >\n                <MaterialCommunityIcons\n                  name={tool.icon}\n                  size={28}\n                  color={activeToolKey === tool.key ? theme.colors.primary : theme.colors.disabled}\n                  accessibilityLabel={tool.label}\n                />\n              </TouchableOpacity>\n            </Tooltip>\n          ))\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: NAVBAR_WIDTH,\n    minWidth: NAVBAR_WIDTH,\n    maxWidth: NAVBAR_WIDTH,\n    height: '100%',\n    borderRightWidth: 1,\n    alignItems: 'center',\n    paddingTop: 16,\n    paddingBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 1, height: 0 },\n    shadowOpacity: 0.04,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  scrollContainer: {\n    alignItems: 'center',\n    gap: 8,\n  },\n  iconButton: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    marginVertical: 4,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  emptyState: {\n    marginTop: 32,\n    alignItems: 'center',\n    opacity: 0.5,\n  },\n});\n\nexport default NavBar;\n\n================================\n          File: components/SidePanel.tsx\n        ================================\n        import React, { useMemo } from 'react';\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\nimport { useTheme, Text } from 'react-native-paper';\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\nimport { useUIStore } from '../store/zustandStore';\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\n\nconst SIDEPANEL_WIDTH = 280;\n\nconst SidePanel: React.FC = () => {\n  const theme = useTheme();\n  const { sidePanels } = usePluginRegistry();\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\n\n  // Memoize the panel component for the active tool\n  const PanelComponent = useMemo(() => {\n    if (!activeToolKey) return null;\n    const reg = sidePanels[activeToolKey];\n    return reg ? reg.panelComponent : null;\n  }, [activeToolKey, sidePanels]);\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: theme.colors.sidePanel, borderRightColor: theme.colors.surface },\n      ]}\n      accessibilityRole=\"complementary\" as={AccessibilityRole}\n      accessibilityLabel=\"Side Panel\"\n      testID=\"side-panel\"\n    >\n      {PanelComponent ? (\n        <PanelComponent />\n      ) : (\n        <View style={styles.emptyState}>\n          <MaterialCommunityIcons name=\"view-sidebar-outline\" size={40} color={theme.colors.disabled} />\n          <Text style={[styles.emptyText, { color: theme.colors.disabled }]}>No panel available</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: SIDEPANEL_WIDTH,\n    minWidth: SIDEPANEL_WIDTH,\n    maxWidth: SIDEPANEL_WIDTH,\n    height: '100%',\n    borderRightWidth: 1,\n    paddingTop: 16,\n    paddingBottom: 16,\n    paddingHorizontal: 0,\n    shadowColor: '#000',\n    shadowOffset: { width: 1, height: 0 },\n    shadowOpacity: 0.04,\n    shadowRadius: 2,\n    elevation: 2,\n    justifyContent: 'flex-start',\n  },\n  emptyState: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: 0.6,\n  },\n  emptyText: {\n    marginTop: 12,\n    fontSize: 16,\n    fontWeight: '400',\n    textAlign: 'center',\n  },\n});\n\nexport default SidePanel;\n\n================================\n          File: components/MainContentArea.tsx\n        ================================\n        import React, { useMemo } from 'react';\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\nimport { useTheme, Text } from 'react-native-paper';\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\nimport { useUIStore } from '../store/zustandStore';\n\nconst MAINCONTENTAREA_MIN_WIDTH = 0; // Flexible, takes up remaining space\n\nconst MainContentArea: React.FC = () => {\n  const theme = useTheme();\n  const { mainContents } = usePluginRegistry();\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\n\n  // Memoize the content component for the active tool\n  const ContentComponent = useMemo(() => {\n    if (!activeToolKey) return null;\n    const reg = mainContents[activeToolKey];\n    return reg ? reg.contentComponent : null;\n  }, [activeToolKey, mainContents]);\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: theme.colors.background },\n      ]}\n      accessibilityRole=\"main\" as={AccessibilityRole}\n      accessibilityLabel=\"Main Content Area\"\n      testID=\"main-content-area\"\n    >\n      {ContentComponent ? (\n        <ContentComponent />\n      ) : (\n        <View style={styles.emptyState}>\n          <MaterialCommunityIcons name=\"application-outline\" size={56} color={theme.colors.disabled} />\n          <Text style={[styles.emptyText, { color: theme.colors.disabled }]}>No content available</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    minWidth: MAINCONTENTAREA_MIN_WIDTH,\n    height: '100%',\n    padding: 0,\n    justifyContent: 'flex-start',\n    alignItems: 'stretch',\n    overflow: 'hidden',\n  },\n  emptyState: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: 0.6,\n  },\n  emptyText: {\n    marginTop: 16,\n    fontSize: 18,\n    fontWeight: '400',\n    textAlign: 'center',\n  },\n});\n\nexport default MainContentArea;\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "Generate code for component AppShell located at path: app/AppShell.tsx. Purpose of the component: Root orchestrator, initializes layout, manages plugin registry, propagates events. Type: layout.\n    If this is the entry file, make sure to initialize the UI library correctly.\n    Tech stack: For the expo app, use zustand for state management,   react-native-paper for UI components library,    expo-router for navigation,    and @react-native-async-storage/async-storage for local device storage.   Use Supabase for backend.\n   .\n    This component is part of an react native app. Architecture of the app as a mermaid diagram: graph TD\n  AppShell --> NavBar\n  AppShell --> SidePanel\n  AppShell --> MainContentArea\n  AppShell --> InspectorPanel\n  AppShell --> PluginRegistry\n  PluginRegistry --> RegisterTool\n  PluginRegistry --> RegisterSidePanel\n  PluginRegistry --> RegisterMainContent\n  PluginRegistry --> RegisterInspector\n  RegisterTool --> NavBar\n  RegisterSidePanel --> SidePanel\n  RegisterMainContent --> MainContentArea\n  RegisterInspector --> InspectorPanel\n  NavBar -- onToolSelect --> SidePanel\n  NavBar -- onToolSelect --> MainContentArea\n  MainContentArea -- onSelectItem --> InspectorPanel.\n    Design used for the app: {\n  \"colors\": {\n    \"primary\": \"#1976D2\",\n    \"secondary\": \"#424242\",\n    \"background\": \"#F5F5F5\",\n    \"surface\": \"#FFFFFF\",\n    \"accent\": \"#FF4081\",\n    \"navBar\": \"#263238\",\n    \"sidePanel\": \"#ECEFF1\",\n    \"inspectorPanel\": \"#FAFAFA\"\n  },\n  \"fonts\": {\n    \"primary\": \"Inter, 'Segoe UI', Arial, sans-serif\",\n    \"size\": \"16px\",\n    \"weight\": \"400\"\n  },\n  \"spacing\": {\n    \"padding\": \"16px\",\n    \"margin\": \"16px\"\n  },\n  \"borderRadius\": \"8px\",\n  \"shadows\": true,\n  \"iconSet\": \"MaterialCommunityIcons\",\n  \"accessibility\": true\n}.\n    Generate code in typescript and make sure the code is properly typed, functional and error free.\n    Do not create placeholder code. Write the actual code that will be used in production.\n    If the code needs to use image, you can use the app_developer_pexelImageSearch tool to search for images and use the image in the code.\n    If the code needs any icon, use material icon library and use the icon in the code.\n    If the code uses any external libraries, include the libraries in the response.\n    Reuse code from dependencies if possible.\n    When using code from dependencies, make sure to import the dependencies correctly based on path.\n    Code for dependent components:\n    ================================\n          File: services/PluginRegistry.ts\n        ================================\n        import { ReactNode } from 'react';\n\n// Types for registration APIs\nexport type ToolRegistration = {\n  key: string;\n  label: string;\n  icon: string; // MaterialCommunityIcons name\n  component: React.ComponentType<any>;\n};\n\nexport type SidePanelRegistration = {\n  toolKey: string;\n  panelComponent: React.ComponentType<any>;\n};\n\nexport type MainContentRegistration = {\n  toolKey: string;\n  contentComponent: React.ComponentType<any>;\n};\n\nexport type InspectorRegistration = {\n  contextType: string;\n  inspectorComponent: React.ComponentType<any>;\n};\n\n// Internal registry state\ninterface RegistryState {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\ntype RegistryListener = (state: RegistryState) => void;\n\nclass PluginRegistryClass {\n  private state: RegistryState = {\n    tools: {},\n    sidePanels: {},\n    mainContents: {},\n    inspectors: {},\n  };\n  private listeners: Set<RegistryListener> = new Set();\n\n  // --- Subscription API ---\n  subscribe(listener: RegistryListener): () => void {\n    this.listeners.add(listener);\n    // Initial call\n    listener(this.state);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notify() {\n    for (const listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n\n  // --- Tool Registration ---\n  registerTool(tool: ToolRegistration) {\n    if (!tool.key) throw new Error('Tool key is required');\n    this.state.tools[tool.key] = tool;\n    this.notify();\n  }\n  deregisterTool(key: string) {\n    delete this.state.tools[key];\n    this.notify();\n  }\n  getTools(): ToolRegistration[] {\n    return Object.values(this.state.tools);\n  }\n  getTool(key: string): ToolRegistration | undefined {\n    return this.state.tools[key];\n  }\n\n  // --- SidePanel Registration ---\n  registerSidePanel(panel: SidePanelRegistration) {\n    if (!panel.toolKey) throw new Error('toolKey is required');\n    this.state.sidePanels[panel.toolKey] = panel;\n    this.notify();\n  }\n  deregisterSidePanel(toolKey: string) {\n    delete this.state.sidePanels[toolKey];\n    this.notify();\n  }\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\n    return this.state.sidePanels[toolKey];\n  }\n\n  // --- MainContent Registration ---\n  registerMainContent(content: MainContentRegistration) {\n    if (!content.toolKey) throw new Error('toolKey is required');\n    this.state.mainContents[content.toolKey] = content;\n    this.notify();\n  }\n  deregisterMainContent(toolKey: string) {\n    delete this.state.mainContents[toolKey];\n    this.notify();\n  }\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\n    return this.state.mainContents[toolKey];\n  }\n\n  // --- Inspector Registration ---\n  registerInspector(inspector: InspectorRegistration) {\n    if (!inspector.contextType) throw new Error('contextType is required');\n    this.state.inspectors[inspector.contextType] = inspector;\n    this.notify();\n  }\n  deregisterInspector(contextType: string) {\n    delete this.state.inspectors[contextType];\n    this.notify();\n  }\n  getInspector(contextType: string): InspectorRegistration | undefined {\n    return this.state.inspectors[contextType];\n  }\n\n  // --- Debug/Dev ---\n  getState(): RegistryState {\n    return this.state;\n  }\n}\n\n// Singleton instance\nexport const PluginRegistry = new PluginRegistryClass();\n\n================================\n          File: store/zustandStore.ts\n        ================================\n        import create from 'zustand';\nimport { persist, StateStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Types for selection context\nexport type SelectionContext = {\n  type: string; // e.g., 'asset', 'object', etc.\n  id: string;\n  [key: string]: any;\n} | null;\n\n// Zustand state interface\ninterface UIState {\n  activeToolKey: string | null;\n  setActiveToolKey: (key: string | null) => void;\n  selection: SelectionContext;\n  setSelection: (selection: SelectionContext) => void;\n  reset: () => void;\n}\n\n// AsyncStorage wrapper for zustand persist\nconst zustandAsyncStorage: StateStorage = {\n  getItem: async (name) => {\n    const value = await AsyncStorage.getItem(name);\n    return value ?? null;\n  },\n  setItem: async (name, value) => {\n    await AsyncStorage.setItem(name, value);\n  },\n  removeItem: async (name) => {\n    await AsyncStorage.removeItem(name);\n  },\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set) => ({\n      activeToolKey: null,\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\n      selection: null,\n      setSelection: (selection) => set({ selection }),\n      reset: () => set({ activeToolKey: null, selection: null }),\n    }),\n    {\n      name: 'ui-store',\n      storage: zustandAsyncStorage,\n      partialize: (state) => ({\n        activeToolKey: state.activeToolKey,\n        selection: state.selection,\n      }),\n      version: 1,\n    }\n  )\n);\n\n// Usage example:\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\n\n================================\n          File: components/ThemeProvider.tsx\n        ================================\n        import React, { ReactNode, useMemo } from 'react';\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: \"Inter, 'Segoe UI', Arial, sans-serif\",\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: 'Inter',\n      fontWeight: '400' as '400',\n      fontSize: 16,\n    },\n    medium: {\n      fontFamily: 'Inter',\n      fontWeight: '500' as '500',\n      fontSize: 16,\n    },\n    light: {\n      fontFamily: 'Inter',\n      fontWeight: '300' as '300',\n      fontSize: 16,\n    },\n    thin: {\n      fontFamily: 'Inter',\n      fontWeight: '200' as '200',\n      fontSize: 16,\n    },\n  },\n};\n\nconst customTheme: Theme = {\n  ...DefaultTheme,\n  roundness: 8,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#1976D2',\n    accent: '#FF4081',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#212121',\n    disabled: '#BDBDBD',\n    placeholder: '#757575',\n    notification: '#FF4081',\n    secondary: '#424242',\n    navBar: '#263238',\n    sidePanel: '#ECEFF1',\n    inspectorPanel: '#FAFAFA',\n  } as Theme['colors'] & {\n    secondary: string;\n    navBar: string;\n    sidePanel: string;\n    inspectorPanel: string;\n  },\n  fonts: configureFonts(fontConfig),\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const colorScheme = useColorScheme();\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\n  const theme = useMemo(() => customTheme, []);\n\n  return (\n    <PaperProvider theme={theme}>\n      {children}\n    </PaperProvider>\n  );\n};\n\nexport default ThemeProvider;\n\n================================\n          File: hooks/usePluginRegistry.ts\n        ================================\n        import { useEffect, useState } from 'react';\nimport { PluginRegistry } from '../services/PluginRegistry';\nimport type {\n  ToolRegistration,\n  SidePanelRegistration,\n  MainContentRegistration,\n  InspectorRegistration,\n} from '../services/PluginRegistry';\n\ninterface UsePluginRegistryResult {\n  tools: Record<string, ToolRegistration>;\n  sidePanels: Record<string, SidePanelRegistration>;\n  mainContents: Record<string, MainContentRegistration>;\n  inspectors: Record<string, InspectorRegistration>;\n}\n\n/**\n * React hook to access and subscribe to PluginRegistry updates.\n * Returns the current registry state and updates on any change.\n */\nexport function usePluginRegistry(): UsePluginRegistryResult {\n  const [state, setState] = useState(PluginRegistry.getState());\n\n  useEffect(() => {\n    const unsubscribe = PluginRegistry.subscribe(setState);\n    return unsubscribe;\n  }, []);\n\n  return state;\n}\n\n================================\n          File: services/registration/RegisterTool.ts\n        ================================\n        import { PluginRegistry, ToolRegistration } from '../PluginRegistry';\n\n/**\n * Registers a tool/mode in the NavBar.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate key is used.\n *\n * @param tool ToolRegistration object\n */\nexport function registerTool(tool: ToolRegistration): void {\n  if (!tool || typeof tool !== 'object') {\n    throw new Error('Tool registration must be an object');\n  }\n  if (!tool.key || typeof tool.key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  if (!tool.label || typeof tool.label !== 'string') {\n    throw new Error('Tool label is required and must be a string');\n  }\n  if (!tool.icon || typeof tool.icon !== 'string') {\n    throw new Error('Tool icon is required and must be a string');\n  }\n  if (!tool.component || typeof tool.component !== 'function') {\n    throw new Error('Tool component is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getTool(tool.key);\n  if (\n    existing &&\n    existing.label === tool.label &&\n    existing.icon === tool.icon &&\n    existing.component === tool.component\n  ) {\n    return;\n  }\n  PluginRegistry.registerTool(tool);\n}\n\n/**\n * Deregisters a tool/mode from the NavBar by key.\n * @param key Tool key\n */\nexport function deregisterTool(key: string): void {\n  if (!key || typeof key !== 'string') {\n    throw new Error('Tool key is required and must be a string');\n  }\n  PluginRegistry.deregisterTool(key);\n}\n\n================================\n          File: services/registration/RegisterSidePanel.ts\n        ================================\n        import { PluginRegistry, SidePanelRegistration } from '../PluginRegistry';\n\n/**\n * Registers a contextual panel for a tool in the SidePanel.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param panel SidePanelRegistration object\n */\nexport function registerSidePanel(panel: SidePanelRegistration): void {\n  if (!panel || typeof panel !== 'object') {\n    throw new Error('SidePanel registration must be an object');\n  }\n  if (!panel.toolKey || typeof panel.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!panel.panelComponent || typeof panel.panelComponent !== 'function') {\n    throw new Error('panelComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getSidePanel(panel.toolKey);\n  if (\n    existing &&\n    existing.panelComponent === panel.panelComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerSidePanel(panel);\n}\n\n/**\n * Deregisters a contextual panel from the SidePanel by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterSidePanel(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterSidePanel(toolKey);\n}\n\n================================\n          File: services/registration/RegisterMainContent.ts\n        ================================\n        import { PluginRegistry, MainContentRegistration } from '../PluginRegistry';\n\n/**\n * Registers a main content view for a tool in the MainContentArea.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param content MainContentRegistration object\n */\nexport function registerMainContent(content: MainContentRegistration): void {\n  if (!content || typeof content !== 'object') {\n    throw new Error('MainContent registration must be an object');\n  }\n  if (!content.toolKey || typeof content.toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  if (!content.contentComponent || typeof content.contentComponent !== 'function') {\n    throw new Error('contentComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getMainContent(content.toolKey);\n  if (\n    existing &&\n    existing.contentComponent === content.contentComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerMainContent(content);\n}\n\n/**\n * Deregisters a main content view from the MainContentArea by toolKey.\n * @param toolKey Tool key\n */\nexport function deregisterMainContent(toolKey: string): void {\n  if (!toolKey || typeof toolKey !== 'string') {\n    throw new Error('toolKey is required and must be a string');\n  }\n  PluginRegistry.deregisterMainContent(toolKey);\n}\n\n================================\n          File: services/registration/RegisterInspector.ts\n        ================================\n        import { PluginRegistry, InspectorRegistration } from '../PluginRegistry';\n\n/**\n * Registers an inspector panel for a given context type.\n * Idempotent and safe for hot reloads.\n * Throws if required fields are missing or duplicate config is used.\n *\n * @param inspector InspectorRegistration object\n */\nexport function registerInspector(inspector: InspectorRegistration): void {\n  if (!inspector || typeof inspector !== 'object') {\n    throw new Error('Inspector registration must be an object');\n  }\n  if (!inspector.contextType || typeof inspector.contextType !== 'string') {\n    throw new Error('contextType is required and must be a string');\n  }\n  if (!inspector.inspectorComponent || typeof inspector.inspectorComponent !== 'function') {\n    throw new Error('inspectorComponent is required and must be a React component');\n  }\n  // Idempotent: If already registered with same config, skip\n  const existing = PluginRegistry.getInspector(inspector.contextType);\n  if (\n    existing &&\n    existing.inspectorComponent === inspector.inspectorComponent\n  ) {\n    return;\n  }\n  PluginRegistry.registerInspector(inspector);\n}\n\n/**\n * Deregisters an inspector panel for a given context type.\n * @param contextType Context type string\n */\nexport function deregisterInspector(contextType: string): void {\n  if (!contextType || typeof contextType !== 'string') {\n    throw new Error('contextType is required and must be a string');\n  }\n  PluginRegistry.deregisterInspector(contextType);\n}\n\n================================\n          File: components/NavBar.tsx\n        ================================\n        import React, { useCallback } from 'react';\nimport { View, StyleSheet, ScrollView, TouchableOpacity, AccessibilityRole } from 'react-native';\nimport { useTheme, IconButton, Tooltip } from 'react-native-paper';\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\nimport { useUIStore } from '../store/zustandStore';\n\nconst NAVBAR_WIDTH = 64;\n\nconst NavBar: React.FC = () => {\n  const theme = useTheme();\n  const { tools } = usePluginRegistry();\n  const toolList = Object.values(tools);\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\n  const setActiveToolKey = useUIStore((state) => state.setActiveToolKey);\n\n  const handleToolPress = useCallback(\n    (key: string) => {\n      if (activeToolKey !== key) {\n        setActiveToolKey(key);\n      }\n    },\n    [activeToolKey, setActiveToolKey]\n  );\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: theme.colors.navBar, borderRightColor: theme.colors.surface },\n      ]}\n      accessibilityRole=\"navigation\"\n      accessibilityLabel=\"Main Navigation Bar\"\n    >\n      <ScrollView\n        contentContainerStyle={styles.scrollContainer}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n      >\n        {toolList.length === 0 ? (\n          <View style={styles.emptyState}>\n            <MaterialCommunityIcons name=\"plus-box-outline\" size={32} color={theme.colors.disabled} />\n          </View>\n        ) : (\n          toolList.map((tool) => (\n            <Tooltip key={tool.key} title={tool.label} enterTouchDelay={0}>\n              <TouchableOpacity\n                accessibilityRole=\"button\" as={AccessibilityRole}\n                accessibilityLabel={tool.label}\n                accessibilityState={{ selected: activeToolKey === tool.key }}\n                onPress={() => handleToolPress(tool.key)}\n                style={[\n                  styles.iconButton,\n                  activeToolKey === tool.key && {\n                    backgroundColor: theme.colors.primary + '22',\n                  },\n                ]}\n                testID={`navbar-tool-${tool.key}`}\n              >\n                <MaterialCommunityIcons\n                  name={tool.icon}\n                  size={28}\n                  color={activeToolKey === tool.key ? theme.colors.primary : theme.colors.disabled}\n                  accessibilityLabel={tool.label}\n                />\n              </TouchableOpacity>\n            </Tooltip>\n          ))\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: NAVBAR_WIDTH,\n    minWidth: NAVBAR_WIDTH,\n    maxWidth: NAVBAR_WIDTH,\n    height: '100%',\n    borderRightWidth: 1,\n    alignItems: 'center',\n    paddingTop: 16,\n    paddingBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 1, height: 0 },\n    shadowOpacity: 0.04,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  scrollContainer: {\n    alignItems: 'center',\n    gap: 8,\n  },\n  iconButton: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    marginVertical: 4,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  emptyState: {\n    marginTop: 32,\n    alignItems: 'center',\n    opacity: 0.5,\n  },\n});\n\nexport default NavBar;\n\n================================\n          File: components/SidePanel.tsx\n        ================================\n        import React, { useMemo } from 'react';\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\nimport { useTheme, Text } from 'react-native-paper';\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\nimport { useUIStore } from '../store/zustandStore';\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\n\nconst SIDEPANEL_WIDTH = 280;\n\nconst SidePanel: React.FC = () => {\n  const theme = useTheme();\n  const { sidePanels } = usePluginRegistry();\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\n\n  // Memoize the panel component for the active tool\n  const PanelComponent = useMemo(() => {\n    if (!activeToolKey) return null;\n    const reg = sidePanels[activeToolKey];\n    return reg ? reg.panelComponent : null;\n  }, [activeToolKey, sidePanels]);\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: theme.colors.sidePanel, borderRightColor: theme.colors.surface },\n      ]}\n      accessibilityRole=\"complementary\" as={AccessibilityRole}\n      accessibilityLabel=\"Side Panel\"\n      testID=\"side-panel\"\n    >\n      {PanelComponent ? (\n        <PanelComponent />\n      ) : (\n        <View style={styles.emptyState}>\n          <MaterialCommunityIcons name=\"view-sidebar-outline\" size={40} color={theme.colors.disabled} />\n          <Text style={[styles.emptyText, { color: theme.colors.disabled }]}>No panel available</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: SIDEPANEL_WIDTH,\n    minWidth: SIDEPANEL_WIDTH,\n    maxWidth: SIDEPANEL_WIDTH,\n    height: '100%',\n    borderRightWidth: 1,\n    paddingTop: 16,\n    paddingBottom: 16,\n    paddingHorizontal: 0,\n    shadowColor: '#000',\n    shadowOffset: { width: 1, height: 0 },\n    shadowOpacity: 0.04,\n    shadowRadius: 2,\n    elevation: 2,\n    justifyContent: 'flex-start',\n  },\n  emptyState: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: 0.6,\n  },\n  emptyText: {\n    marginTop: 12,\n    fontSize: 16,\n    fontWeight: '400',\n    textAlign: 'center',\n  },\n});\n\nexport default SidePanel;\n\n================================\n          File: components/MainContentArea.tsx\n        ================================\n        import React, { useMemo } from 'react';\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\nimport { useTheme, Text } from 'react-native-paper';\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\nimport { useUIStore } from '../store/zustandStore';\n\nconst MAINCONTENTAREA_MIN_WIDTH = 0; // Flexible, takes up remaining space\n\nconst MainContentArea: React.FC = () => {\n  const theme = useTheme();\n  const { mainContents } = usePluginRegistry();\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\n\n  // Memoize the content component for the active tool\n  const ContentComponent = useMemo(() => {\n    if (!activeToolKey) return null;\n    const reg = mainContents[activeToolKey];\n    return reg ? reg.contentComponent : null;\n  }, [activeToolKey, mainContents]);\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: theme.colors.background },\n      ]}\n      accessibilityRole=\"main\" as={AccessibilityRole}\n      accessibilityLabel=\"Main Content Area\"\n      testID=\"main-content-area\"\n    >\n      {ContentComponent ? (\n        <ContentComponent />\n      ) : (\n        <View style={styles.emptyState}>\n          <MaterialCommunityIcons name=\"application-outline\" size={56} color={theme.colors.disabled} />\n          <Text style={[styles.emptyText, { color: theme.colors.disabled }]}>No content available</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    minWidth: MAINCONTENTAREA_MIN_WIDTH,\n    height: '100%',\n    padding: 0,\n    justifyContent: 'flex-start',\n    alignItems: 'stretch',\n    overflow: 'hidden',\n  },\n  emptyState: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: 0.6,\n  },\n  emptyText: {\n    marginTop: 16,\n    fontSize: 18,\n    fontWeight: '400',\n    textAlign: 'center',\n  },\n});\n\nexport default MainContentArea;\n\n================================\n          File: components/InspectorPanel.tsx\n        ================================\n        import React, { useMemo } from 'react';\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\nimport { useTheme, Text } from 'react-native-paper';\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\nimport { useUIStore } from '../store/zustandStore';\n\nconst INSPECTOR_PANEL_WIDTH = 320;\n\nconst InspectorPanel: React.FC = () => {\n  const theme = useTheme();\n  const { inspectors } = usePluginRegistry();\n  const selection = useUIStore((state) => state.selection);\n\n  // Memoize the inspector component for the current selection context\n  const InspectorComponent = useMemo(() => {\n    if (!selection || !selection.type) return null;\n    const reg = inspectors[selection.type];\n    return reg ? reg.inspectorComponent : null;\n  }, [selection, inspectors]);\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: theme.colors.inspectorPanel, borderLeftColor: theme.colors.surface },\n      ]}\n      accessibilityRole=\"complementary\" as={AccessibilityRole}\n      accessibilityLabel=\"Inspector Panel\"\n      testID=\"inspector-panel\"\n    >\n      {InspectorComponent ? (\n        <InspectorComponent selection={selection} />\n      ) : (\n        <View style={styles.emptyState}>\n          <MaterialCommunityIcons name=\"file-document-outline\" size={40} color={theme.colors.disabled} />\n          <Text style={[styles.emptyText, { color: theme.colors.disabled }]}>No details to display</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: INSPECTOR_PANEL_WIDTH,\n    minWidth: INSPECTOR_PANEL_WIDTH,\n    maxWidth: INSPECTOR_PANEL_WIDTH,\n    height: '100%',\n    borderLeftWidth: 1,\n    paddingTop: 16,\n    paddingBottom: 16,\n    paddingHorizontal: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: -1, height: 0 },\n    shadowOpacity: 0.04,\n    shadowRadius: 2,\n    elevation: 2,\n    justifyContent: 'flex-start',\n  },\n  emptyState: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: 0.6,\n  },\n  emptyText: {\n    marginTop: 12,\n    fontSize: 16,\n    fontWeight: '400',\n    textAlign: 'center',\n  },\n});\n\nexport default InspectorPanel;\n\n================================\n          File: supabase/database.types.ts\n        ================================\n        export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          password_hash: string\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          password_hash: string\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          password_hash?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n    Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])\n  ? (DefaultSchema[\"Tables\"] &\n    DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n      Row: infer R\n    }\n  ? R\n  : never\n  : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Insert: infer I\n  }\n  ? I\n  : never\n  : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n  | keyof DefaultSchema[\"Tables\"]\n  | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n  : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n  ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n    Update: infer U\n  }\n  ? U\n  : never\n  : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n  | keyof DefaultSchema[\"Enums\"]\n  | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n  : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n  ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n  : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n  | keyof DefaultSchema[\"CompositeTypes\"]\n  | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n  ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n  : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n  ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n  : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n\n================================\n          File: .env.local\n        ================================\n        \n    EXPO_PUBLIC_SUPABASE_URL=https://jtcutjzkoxcqkjuyfqht.supabase.co\n    EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0Y3V0anprb3hjcWtqdXlmcWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MDEyMDEsImV4cCI6MjA2NDM3NzIwMX0.1vJGkhJQbDF0NP1S3u_l7wRomyX-Q6XKNl_UpfOaVNM\n    .",
    "role": "user"
  },
  {
    "content": "You are an expert at debugging and fixing issues in code. You will be provided with a list of files, each with its current content and a list of error messages.Your task is to identify and fix all issues in all files, taking into account cross-file dependencies.For each file, apply all necessary fixes so that all error messages are resolved.Return the fixed content for each file. Do not provide any explanation or additional information.Respond strictly in the required JSON schema. Here are the files and their issues: [{\"filePath\":\"services/PluginRegistry.ts\",\"content\":\"import { ReactNode } from 'react';\\n\\n// Types for registration APIs\\nexport type ToolRegistration = {\\n  key: string;\\n  label: string;\\n  icon: string; // MaterialCommunityIcons name\\n  component: React.ComponentType<any>;\\n};\\n\\nexport type SidePanelRegistration = {\\n  toolKey: string;\\n  panelComponent: React.ComponentType<any>;\\n};\\n\\nexport type MainContentRegistration = {\\n  toolKey: string;\\n  contentComponent: React.ComponentType<any>;\\n};\\n\\nexport type InspectorRegistration = {\\n  contextType: string;\\n  inspectorComponent: React.ComponentType<any>;\\n};\\n\\n// Internal registry state\\ninterface RegistryState {\\n  tools: Record<string, ToolRegistration>;\\n  sidePanels: Record<string, SidePanelRegistration>;\\n  mainContents: Record<string, MainContentRegistration>;\\n  inspectors: Record<string, InspectorRegistration>;\\n}\\n\\ntype RegistryEvent = 'tools' | 'sidePanels' | 'mainContents' | 'inspectors';\\ntype RegistryListener = (state: RegistryState) => void;\\n\\nclass PluginRegistryClass {\\n  private state: RegistryState = {\\n    tools: {},\\n    sidePanels: {},\\n    mainContents: {},\\n    inspectors: {},\\n  };\\n  private listeners: Set<RegistryListener> = new Set();\\n\\n  // --- Subscription API ---\\n  subscribe(listener: RegistryListener): () => void {\\n    this.listeners.add(listener);\\n    // Initial call\\n    listener(this.state);\\n    return () => {\\n      this.listeners.delete(listener);\\n    };\\n  }\\n\\n  private notify() {\\n    for (const listener of this.listeners) {\\n      listener(this.state);\\n    }\\n  }\\n\\n  // --- Tool Registration ---\\n  registerTool(tool: ToolRegistration) {\\n    if (!tool.key) throw new Error('Tool key is required');\\n    this.state.tools[tool.key] = tool;\\n    this.notify();\\n  }\\n  deregisterTool(key: string) {\\n    delete this.state.tools[key];\\n    this.notify();\\n  }\\n  getTools(): ToolRegistration[] {\\n    return Object.values(this.state.tools);\\n  }\\n  getTool(key: string): ToolRegistration | undefined {\\n    return this.state.tools[key];\\n  }\\n\\n  // --- SidePanel Registration ---\\n  registerSidePanel(panel: SidePanelRegistration) {\\n    if (!panel.toolKey) throw new Error('toolKey is required');\\n    this.state.sidePanels[panel.toolKey] = panel;\\n    this.notify();\\n  }\\n  deregisterSidePanel(toolKey: string) {\\n    delete this.state.sidePanels[toolKey];\\n    this.notify();\\n  }\\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\\n    return this.state.sidePanels[toolKey];\\n  }\\n\\n  // --- MainContent Registration ---\\n  registerMainContent(content: MainContentRegistration) {\\n    if (!content.toolKey) throw new Error('toolKey is required');\\n    this.state.mainContents[content.toolKey] = content;\\n    this.notify();\\n  }\\n  deregisterMainContent(toolKey: string) {\\n    delete this.state.mainContents[toolKey];\\n    this.notify();\\n  }\\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\\n    return this.state.mainContents[toolKey];\\n  }\\n\\n  // --- Inspector Registration ---\\n  registerInspector(inspector: InspectorRegistration) {\\n    if (!inspector.contextType) throw new Error('contextType is required');\\n    this.state.inspectors[inspector.contextType] = inspector;\\n    this.notify();\\n  }\\n  deregisterInspector(contextType: string) {\\n    delete this.state.inspectors[contextType];\\n    this.notify();\\n  }\\n  getInspector(contextType: string): InspectorRegistration | undefined {\\n    return this.state.inspectors[contextType];\\n  }\\n\\n  // --- Debug/Dev ---\\n  getState(): RegistryState {\\n    return this.state;\\n  }\\n}\\n\\n// Singleton instance\\nexport const PluginRegistry = new PluginRegistryClass();\\n\",\"errorMessages\":[\"'ReactNode' is defined but never used.\",\"'RegistryEvent' is defined but never used.\",\"'ReactNode' is declared but its value is never read.\",\"'RegistryEvent' is declared but never used.\"],\"contentType\":\"typescript\"},{\"filePath\":\"store/zustandStore.ts\",\"content\":\"import create from 'zustand';\\nimport { persist, StateStorage } from 'zustand/middleware';\\nimport AsyncStorage from '@react-native-async-storage/async-storage';\\n\\n// Types for selection context\\nexport type SelectionContext = {\\n  type: string; // e.g., 'asset', 'object', etc.\\n  id: string;\\n  [key: string]: any;\\n} | null;\\n\\n// Zustand state interface\\ninterface UIState {\\n  activeToolKey: string | null;\\n  setActiveToolKey: (key: string | null) => void;\\n  selection: SelectionContext;\\n  setSelection: (selection: SelectionContext) => void;\\n  reset: () => void;\\n}\\n\\n// AsyncStorage wrapper for zustand persist\\nconst zustandAsyncStorage: StateStorage = {\\n  getItem: async (name) => {\\n    const value = await AsyncStorage.getItem(name);\\n    return value ?? null;\\n  },\\n  setItem: async (name, value) => {\\n    await AsyncStorage.setItem(name, value);\\n  },\\n  removeItem: async (name) => {\\n    await AsyncStorage.removeItem(name);\\n  },\\n};\\n\\nexport const useUIStore = create<UIState>()(\\n  persist(\\n    (set) => ({\\n      activeToolKey: null,\\n      setActiveToolKey: (key) => set({ activeToolKey: key }),\\n      selection: null,\\n      setSelection: (selection) => set({ selection }),\\n      reset: () => set({ activeToolKey: null, selection: null }),\\n    }),\\n    {\\n      name: 'ui-store',\\n      storage: zustandAsyncStorage,\\n      partialize: (state) => ({\\n        activeToolKey: state.activeToolKey,\\n        selection: state.selection,\\n      }),\\n      version: 1,\\n    }\\n  )\\n);\\n\\n// Usage example:\\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\\n\",\"errorMessages\":[\"This expression is not callable.\\n  Type 'typeof import(\\\"c:/Projects/FinickyForge Website/Glibuzz Personal Portfolio Next Js Template/downloadable/glibuzz/pluggabledashboardshell/node_modules/zustand/index\\\")' has no call signatures.\",\"Parameter 'key' implicitly has an 'any' type.\",\"Parameter 'selection' implicitly has an 'any' type.\",\"Type 'StateStorage' is not assignable to type 'PersistStorage<unknown>'.\\n  The types returned by 'getItem(...)' are incompatible between these types.\\n    Type 'string | Promise<string | null> | null' is not assignable to type 'StorageValue<unknown> | Promise<StorageValue<unknown> | null> | null'.\\n      Type 'string' is not assignable to type 'StorageValue<unknown> | Promise<StorageValue<unknown> | null> | null'.\",\"'state' is of type 'unknown'.\",\"'state' is of type 'unknown'.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/ThemeProvider.tsx\",\"content\":\"import React, { ReactNode, useMemo } from 'react';\\nimport { Provider as PaperProvider, DefaultTheme, configureFonts, Theme } from 'react-native-paper';\\nimport { useColorScheme } from 'react-native';\\n\\nconst fontConfig = {\\n  web: {\\n    regular: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n    },\\n    medium: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n    },\\n    light: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n    },\\n    thin: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n    },\\n  },\\n  ios: {\\n    regular: {\\n      fontFamily: 'Inter',\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n    },\\n    medium: {\\n      fontFamily: 'Inter',\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n    },\\n    light: {\\n      fontFamily: 'Inter',\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n    },\\n    thin: {\\n      fontFamily: 'Inter',\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n    },\\n  },\\n  android: {\\n    regular: {\\n      fontFamily: 'Inter',\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n    },\\n    medium: {\\n      fontFamily: 'Inter',\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n    },\\n    light: {\\n      fontFamily: 'Inter',\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n    },\\n    thin: {\\n      fontFamily: 'Inter',\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n    },\\n  },\\n};\\n\\nconst customTheme: Theme = {\\n  ...DefaultTheme,\\n  roundness: 8,\\n  colors: {\\n    ...DefaultTheme.colors,\\n    primary: '#1976D2',\\n    accent: '#FF4081',\\n    background: '#F5F5F5',\\n    surface: '#FFFFFF',\\n    text: '#212121',\\n    disabled: '#BDBDBD',\\n    placeholder: '#757575',\\n    notification: '#FF4081',\\n    secondary: '#424242',\\n    navBar: '#263238',\\n    sidePanel: '#ECEFF1',\\n    inspectorPanel: '#FAFAFA',\\n  } as Theme['colors'] & {\\n    secondary: string;\\n    navBar: string;\\n    sidePanel: string;\\n    inspectorPanel: string;\\n  },\\n  fonts: configureFonts(fontConfig),\\n};\\n\\ninterface ThemeProviderProps {\\n  children: ReactNode;\\n}\\n\\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\\n  const colorScheme = useColorScheme();\\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\\n  const theme = useMemo(() => customTheme, []);\\n\\n  return (\\n    <PaperProvider theme={theme}>\\n      {children}\\n    </PaperProvider>\\n  );\\n};\\n\\nexport default ThemeProvider;\\n\",\"errorMessages\":[\"'colorScheme' is assigned a value but never used.\",\"Module '\\\"react-native-paper\\\"' has no exported member 'Theme'.\",\"No overload matches this call.\\n  The last overload gave the following error.\\n    Argument of type '{ web: { regular: { fontFamily: string; fontWeight: \\\"400\\\"; fontSize: number; }; medium: { fontFamily: string; fontWeight: \\\"500\\\"; fontSize: number; }; light: { fontFamily: string; fontWeight: \\\"300\\\"; fontSize: number; }; thin: { ...; }; }; ios: { ...; }; android: { ...; }; }' is not assignable to parameter of type '{ config: Record<string, MD3Type>; isV3?: true | undefined; }'.\\n      Property 'config' is missing in type '{ web: { regular: { fontFamily: string; fontWeight: \\\"400\\\"; fontSize: number; }; medium: { fontFamily: string; fontWeight: \\\"500\\\"; fontSize: number; }; light: { fontFamily: string; fontWeight: \\\"300\\\"; fontSize: number; }; thin: { ...; }; }; ios: { ...; }; android: { ...; }; }' but required in type '{ config: Record<string, MD3Type>; isV3?: true | undefined; }'.\",\"'colorScheme' is declared but its value is never read.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/NavBar.tsx\",\"content\":\"import React, { useCallback } from 'react';\\nimport { View, StyleSheet, ScrollView, TouchableOpacity, AccessibilityRole } from 'react-native';\\nimport { useTheme, IconButton, Tooltip } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst NAVBAR_WIDTH = 64;\\n\\nconst NavBar: React.FC = () => {\\n  const theme = useTheme();\\n  const { tools } = usePluginRegistry();\\n  const toolList = Object.values(tools);\\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\\n  const setActiveToolKey = useUIStore((state) => state.setActiveToolKey);\\n\\n  const handleToolPress = useCallback(\\n    (key: string) => {\\n      if (activeToolKey !== key) {\\n        setActiveToolKey(key);\\n      }\\n    },\\n    [activeToolKey, setActiveToolKey]\\n  );\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: theme.colors.navBar, borderRightColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole=\\\"navigation\\\"\\n      accessibilityLabel=\\\"Main Navigation Bar\\\"\\n    >\\n      <ScrollView\\n        contentContainerStyle={styles.scrollContainer}\\n        showsVerticalScrollIndicator={false}\\n        keyboardShouldPersistTaps=\\\"handled\\\"\\n      >\\n        {toolList.length === 0 ? (\\n          <View style={styles.emptyState}>\\n            <MaterialCommunityIcons name=\\\"plus-box-outline\\\" size={32} color={theme.colors.disabled} />\\n          </View>\\n        ) : (\\n          toolList.map((tool) => (\\n            <Tooltip key={tool.key} title={tool.label} enterTouchDelay={0}>\\n              <TouchableOpacity\\n                accessibilityRole=\\\"button\\\" as={AccessibilityRole}\\n                accessibilityLabel={tool.label}\\n                accessibilityState={{ selected: activeToolKey === tool.key }}\\n                onPress={() => handleToolPress(tool.key)}\\n                style={[\\n                  styles.iconButton,\\n                  activeToolKey === tool.key && {\\n                    backgroundColor: theme.colors.primary + '22',\\n                  },\\n                ]}\\n                testID={`navbar-tool-${tool.key}`}\\n              >\\n                <MaterialCommunityIcons\\n                  name={tool.icon}\\n                  size={28}\\n                  color={activeToolKey === tool.key ? theme.colors.primary : theme.colors.disabled}\\n                  accessibilityLabel={tool.label}\\n                />\\n              </TouchableOpacity>\\n            </Tooltip>\\n          ))\\n        )}\\n      </ScrollView>\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: NAVBAR_WIDTH,\\n    minWidth: NAVBAR_WIDTH,\\n    maxWidth: NAVBAR_WIDTH,\\n    height: '100%',\\n    borderRightWidth: 1,\\n    alignItems: 'center',\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    shadowColor: '#000',\\n    shadowOffset: { width: 1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n  },\\n  scrollContainer: {\\n    alignItems: 'center',\\n    gap: 8,\\n  },\\n  iconButton: {\\n    width: 48,\\n    height: 48,\\n    borderRadius: 24,\\n    marginVertical: 4,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n  emptyState: {\\n    marginTop: 32,\\n    alignItems: 'center',\\n    opacity: 0.5,\\n  },\\n});\\n\\nexport default NavBar;\\n\",\"errorMessages\":[\"'IconButton' is defined but never used.\",\"Parameter 'state' implicitly has an 'any' type.\",\"Parameter 'state' implicitly has an 'any' type.\",\"Property 'navBar' does not exist on type 'MD3Colors'.\",\"Type '\\\"navigation\\\"' is not assignable to type 'AccessibilityRole | undefined'.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"Type '{ children: Element; accessibilityRole: \\\"button\\\"; as: any; accessibilityLabel: string; accessibilityState: { selected: boolean; }; onPress: () => void; style: (false | { width: number; ... 4 more ...; justifyContent: \\\"center\\\"; } | { ...; })[]; testID: string; }' is not assignable to type 'IntrinsicAttributes & TouchableOpacityProps & RefAttributes<View>'.\\n  Property 'as' does not exist on type 'IntrinsicAttributes & TouchableOpacityProps & RefAttributes<View>'.\",\"'AccessibilityRole' only refers to a type, but is being used as a value here.\",\"Type 'string' is not assignable to type '\\\"symbol\\\" | \\\"function\\\" | \\\"solid\\\" | \\\"filter\\\" | \\\"sort\\\" | \\\"map\\\" | \\\"at\\\" | \\\"link\\\" | \\\"image\\\" | \\\"text\\\" | \\\"alert\\\" | \\\"menu\\\" | \\\"radio\\\" | \\\"switch\\\" | \\\"tab\\\" | \\\"timer\\\" | \\\"head\\\" | \\\"email\\\" | \\\"forward\\\" | ... 6577 more ... | undefined'.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"'AccessibilityRole' is declared but its value is never read.\",\"'IconButton' is declared but its value is never read.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/SidePanel.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\n\\nconst SIDEPANEL_WIDTH = 280;\\n\\nconst SidePanel: React.FC = () => {\\n  const theme = useTheme();\\n  const { sidePanels } = usePluginRegistry();\\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\\n\\n  // Memoize the panel component for the active tool\\n  const PanelComponent = useMemo(() => {\\n    if (!activeToolKey) return null;\\n    const reg = sidePanels[activeToolKey];\\n    return reg ? reg.panelComponent : null;\\n  }, [activeToolKey, sidePanels]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: theme.colors.sidePanel, borderRightColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole=\\\"complementary\\\" as={AccessibilityRole}\\n      accessibilityLabel=\\\"Side Panel\\\"\\n      testID=\\\"side-panel\\\"\\n    >\\n      {PanelComponent ? (\\n        <PanelComponent />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name=\\\"view-sidebar-outline\\\" size={40} color={theme.colors.disabled} />\\n          <Text style={[styles.emptyText, { color: theme.colors.disabled }]}>No panel available</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: SIDEPANEL_WIDTH,\\n    minWidth: SIDEPANEL_WIDTH,\\n    maxWidth: SIDEPANEL_WIDTH,\\n    height: '100%',\\n    borderRightWidth: 1,\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    paddingHorizontal: 0,\\n    shadowColor: '#000',\\n    shadowOffset: { width: 1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n    justifyContent: 'flex-start',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 12,\\n    fontSize: 16,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default SidePanel;\\n\",\"errorMessages\":[\"Parameter 'state' implicitly has an 'any' type.\",\"Property 'sidePanel' does not exist on type 'MD3Colors'.\",\"Type '\\\"complementary\\\"' is not assignable to type 'AccessibilityRole | undefined'.\",\"'AccessibilityRole' only refers to a type, but is being used as a value here.\",\"Type '\\\"view-sidebar-outline\\\"' is not assignable to type '\\\"symbol\\\" | \\\"function\\\" | \\\"solid\\\" | \\\"filter\\\" | \\\"sort\\\" | \\\"map\\\" | \\\"at\\\" | \\\"link\\\" | \\\"image\\\" | \\\"text\\\" | \\\"alert\\\" | \\\"menu\\\" | \\\"radio\\\" | \\\"switch\\\" | \\\"tab\\\" | \\\"timer\\\" | \\\"head\\\" | \\\"email\\\" | \\\"forward\\\" | ... 6577 more ... | undefined'. Did you mean '\\\"view-day-outline\\\"'?\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"'AccessibilityRole' is declared but its value is never read.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/MainContentArea.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst MAINCONTENTAREA_MIN_WIDTH = 0; // Flexible, takes up remaining space\\n\\nconst MainContentArea: React.FC = () => {\\n  const theme = useTheme();\\n  const { mainContents } = usePluginRegistry();\\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\\n\\n  // Memoize the content component for the active tool\\n  const ContentComponent = useMemo(() => {\\n    if (!activeToolKey) return null;\\n    const reg = mainContents[activeToolKey];\\n    return reg ? reg.contentComponent : null;\\n  }, [activeToolKey, mainContents]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: theme.colors.background },\\n      ]}\\n      accessibilityRole=\\\"main\\\" as={AccessibilityRole}\\n      accessibilityLabel=\\\"Main Content Area\\\"\\n      testID=\\\"main-content-area\\\"\\n    >\\n      {ContentComponent ? (\\n        <ContentComponent />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name=\\\"application-outline\\\" size={56} color={theme.colors.disabled} />\\n          <Text style={[styles.emptyText, { color: theme.colors.disabled }]}>No content available</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    minWidth: MAINCONTENTAREA_MIN_WIDTH,\\n    height: '100%',\\n    padding: 0,\\n    justifyContent: 'flex-start',\\n    alignItems: 'stretch',\\n    overflow: 'hidden',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 16,\\n    fontSize: 18,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default MainContentArea;\\n\",\"errorMessages\":[\"Parameter 'state' implicitly has an 'any' type.\",\"Type '\\\"main\\\"' is not assignable to type 'AccessibilityRole | undefined'.\",\"'AccessibilityRole' only refers to a type, but is being used as a value here.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"'AccessibilityRole' is declared but its value is never read.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/InspectorPanel.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst INSPECTOR_PANEL_WIDTH = 320;\\n\\nconst InspectorPanel: React.FC = () => {\\n  const theme = useTheme();\\n  const { inspectors } = usePluginRegistry();\\n  const selection = useUIStore((state) => state.selection);\\n\\n  // Memoize the inspector component for the current selection context\\n  const InspectorComponent = useMemo(() => {\\n    if (!selection || !selection.type) return null;\\n    const reg = inspectors[selection.type];\\n    return reg ? reg.inspectorComponent : null;\\n  }, [selection, inspectors]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: theme.colors.inspectorPanel, borderLeftColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole=\\\"complementary\\\" as={AccessibilityRole}\\n      accessibilityLabel=\\\"Inspector Panel\\\"\\n      testID=\\\"inspector-panel\\\"\\n    >\\n      {InspectorComponent ? (\\n        <InspectorComponent selection={selection} />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name=\\\"file-document-outline\\\" size={40} color={theme.colors.disabled} />\\n          <Text style={[styles.emptyText, { color: theme.colors.disabled }]}>No details to display</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: INSPECTOR_PANEL_WIDTH,\\n    minWidth: INSPECTOR_PANEL_WIDTH,\\n    maxWidth: INSPECTOR_PANEL_WIDTH,\\n    height: '100%',\\n    borderLeftWidth: 1,\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    paddingHorizontal: 16,\\n    shadowColor: '#000',\\n    shadowOffset: { width: -1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n    justifyContent: 'flex-start',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 12,\\n    fontSize: 16,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default InspectorPanel;\\n\",\"errorMessages\":[\"Parameter 'state' implicitly has an 'any' type.\",\"Property 'inspectorPanel' does not exist on type 'MD3Colors'.\",\"Type '\\\"complementary\\\"' is not assignable to type 'AccessibilityRole | undefined'.\",\"'AccessibilityRole' only refers to a type, but is being used as a value here.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"'AccessibilityRole' is declared but its value is never read.\"],\"contentType\":\"typescript\"}].",
    "role": "system"
  },
  {
    "content": "You are an expert at debugging and fixing issues in code. You will be provided with a list of files, each with its current content and a list of error messages.Your task is to identify and fix all issues in all files, taking into account cross-file dependencies.For each file, apply all necessary fixes so that all error messages are resolved.Return the fixed content for each file. Do not provide any explanation or additional information.Respond strictly in the required JSON schema. Here are the files and their issues: [{\"filePath\":\"services/PluginRegistry.ts\",\"content\":\"import React from 'react';\\n\\n// Types for registration APIs\\nexport type ToolRegistration = {\\n  key: string;\\n  label: string;\\n  icon: string; // MaterialCommunityIcons name\\n  component: React.ComponentType<any>;\\n};\\n\\nexport type SidePanelRegistration = {\\n  toolKey: string;\\n  panelComponent: React.ComponentType<any>;\\n};\\n\\nexport type MainContentRegistration = {\\n  toolKey: string;\\n  contentComponent: React.ComponentType<any>;\\n};\\n\\nexport type InspectorRegistration = {\\n  contextType: string;\\n  inspectorComponent: React.ComponentType<any>;\\n};\\n\\n// Internal registry state\\ninterface RegistryState {\\n  tools: Record<string, ToolRegistration>;\\n  sidePanels: Record<string, SidePanelRegistration>;\\n  mainContents: Record<string, MainContentRegistration>;\\n  inspectors: Record<string, InspectorRegistration>;\\n}\\n\\ntype RegistryListener = (state: RegistryState) => void;\\n\\nclass PluginRegistryClass {\\n  private state: RegistryState = {\\n    tools: {},\\n    sidePanels: {},\\n    mainContents: {},\\n    inspectors: {},\\n  };\\n  private listeners: Set<RegistryListener> = new Set();\\n\\n  // --- Subscription API ---\\n  subscribe(listener: RegistryListener): () => void {\\n    this.listeners.add(listener);\\n    // Initial call\\n    listener(this.state);\\n    return () => {\\n      this.listeners.delete(listener);\\n    };\\n  }\\n\\n  private notify() {\\n    for (const listener of this.listeners) {\\n      listener(this.state);\\n    }\\n  }\\n\\n  // --- Tool Registration ---\\n  registerTool(tool: ToolRegistration) {\\n    if (!tool.key) throw new Error('Tool key is required');\\n    this.state.tools[tool.key] = tool;\\n    this.notify();\\n  }\\n  deregisterTool(key: string) {\\n    delete this.state.tools[key];\\n    this.notify();\\n  }\\n  getTools(): ToolRegistration[] {\\n    return Object.values(this.state.tools);\\n  }\\n  getTool(key: string): ToolRegistration | undefined {\\n    return this.state.tools[key];\\n  }\\n\\n  // --- SidePanel Registration ---\\n  registerSidePanel(panel: SidePanelRegistration) {\\n    if (!panel.toolKey) throw new Error('toolKey is required');\\n    this.state.sidePanels[panel.toolKey] = panel;\\n    this.notify();\\n  }\\n  deregisterSidePanel(toolKey: string) {\\n    delete this.state.sidePanels[toolKey];\\n    this.notify();\\n  }\\n  getSidePanel(toolKey: string): SidePanelRegistration | undefined {\\n    return this.state.sidePanels[toolKey];\\n  }\\n\\n  // --- MainContent Registration ---\\n  registerMainContent(content: MainContentRegistration) {\\n    if (!content.toolKey) throw new Error('toolKey is required');\\n    this.state.mainContents[content.toolKey] = content;\\n    this.notify();\\n  }\\n  deregisterMainContent(toolKey: string) {\\n    delete this.state.mainContents[toolKey];\\n    this.notify();\\n  }\\n  getMainContent(toolKey: string): MainContentRegistration | undefined {\\n    return this.state.mainContents[toolKey];\\n  }\\n\\n  // --- Inspector Registration ---\\n  registerInspector(inspector: InspectorRegistration) {\\n    if (!inspector.contextType) throw new Error('contextType is required');\\n    this.state.inspectors[inspector.contextType] = inspector;\\n    this.notify();\\n  }\\n  deregisterInspector(contextType: string) {\\n    delete this.state.inspectors[contextType];\\n    this.notify();\\n  }\\n  getInspector(contextType: string): InspectorRegistration | undefined {\\n    return this.state.inspectors[contextType];\\n  }\\n\\n  // --- Debug/Dev ---\\n  getState(): RegistryState {\\n    return this.state;\\n  }\\n}\\n\\n// Singleton instance\\nexport const PluginRegistry = new PluginRegistryClass();\\n\",\"errorMessages\":[\"'ReactNode' is declared but its value is never read.\",\"'RegistryEvent' is declared but never used.\"],\"contentType\":\"typescript\"},{\"filePath\":\"store/zustandStore.ts\",\"content\":\"import { create } from 'zustand';\\nimport { persist } from 'zustand/middleware';\\nimport AsyncStorage from '@react-native-async-storage/async-storage';\\n\\n// Types for selection context\\nexport type SelectionContext = {\\n  type: string; // e.g., 'asset', 'object', etc.\\n  id: string;\\n  [key: string]: any;\\n} | null;\\n\\n// Zustand state interface\\ninterface UIState {\\n  activeToolKey: string | null;\\n  setActiveToolKey: (key: string | null) => void;\\n  selection: SelectionContext;\\n  setSelection: (selection: SelectionContext) => void;\\n  reset: () => void;\\n}\\n\\n// AsyncStorage wrapper for zustand persist\\nconst zustandAsyncStorage = {\\n  getItem: async (name: string): Promise<string | null> => {\\n    const value = await AsyncStorage.getItem(name);\\n    return value ?? null;\\n  },\\n  setItem: async (name: string, value: string): Promise<void> => {\\n    await AsyncStorage.setItem(name, value);\\n  },\\n  removeItem: async (name: string): Promise<void> => {\\n    await AsyncStorage.removeItem(name);\\n  },\\n};\\n\\nexport const useUIStore = create<UIState>()(\\n  persist(\\n    (set) => ({\\n      activeToolKey: null,\\n      setActiveToolKey: (key: string | null) => set({ activeToolKey: key }),\\n      selection: null,\\n      setSelection: (selection: SelectionContext) => set({ selection }),\\n      reset: () => set({ activeToolKey: null, selection: null }),\\n    }),\\n    {\\n      name: 'ui-store',\\n      storage: zustandAsyncStorage as any,\\n      partialize: (state: UIState) => ({\\n        activeToolKey: state.activeToolKey,\\n        selection: state.selection,\\n      }),\\n      version: 1,\\n    }\\n  )\\n);\\n\\n// Usage example:\\n// const { activeToolKey, setActiveToolKey, selection, setSelection } = useUIStore();\\n\",\"errorMessages\":[\"This expression is not callable.\\n  Type 'typeof import(\\\"c:/Projects/FinickyForge Website/Glibuzz Personal Portfolio Next Js Template/downloadable/glibuzz/pluggabledashboardshell/node_modules/zustand/index\\\")' has no call signatures.\",\"Parameter 'key' implicitly has an 'any' type.\",\"Parameter 'selection' implicitly has an 'any' type.\",\"Type 'StateStorage' is not assignable to type 'PersistStorage<unknown>'.\\n  The types returned by 'getItem(...)' are incompatible between these types.\\n    Type 'string | Promise<string | null> | null' is not assignable to type 'StorageValue<unknown> | Promise<StorageValue<unknown> | null> | null'.\\n      Type 'string' is not assignable to type 'StorageValue<unknown> | Promise<StorageValue<unknown> | null> | null'.\",\"'state' is of type 'unknown'.\",\"'state' is of type 'unknown'.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/ThemeProvider.tsx\",\"content\":\"import React, { ReactNode, useMemo } from 'react';\\nimport { Provider as PaperProvider, DefaultTheme, configureFonts } from 'react-native-paper';\\nimport { useColorScheme } from 'react-native';\\n\\nconst fontConfig = {\\n  web: {\\n    regular: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n    },\\n    medium: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n    },\\n    light: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n    },\\n    thin: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n    },\\n  },\\n  ios: {\\n    regular: {\\n      fontFamily: 'Inter',\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n    },\\n    medium: {\\n      fontFamily: 'Inter',\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n    },\\n    light: {\\n      fontFamily: 'Inter',\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n    },\\n    thin: {\\n      fontFamily: 'Inter',\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n    },\\n  },\\n  android: {\\n    regular: {\\n      fontFamily: 'Inter',\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n    },\\n    medium: {\\n      fontFamily: 'Inter',\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n    },\\n    light: {\\n      fontFamily: 'Inter',\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n    },\\n    thin: {\\n      fontFamily: 'Inter',\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n    },\\n  },\\n};\\n\\nconst customTheme = {\\n  ...DefaultTheme,\\n  roundness: 8,\\n  colors: {\\n    ...DefaultTheme.colors,\\n    primary: '#1976D2',\\n    accent: '#FF4081',\\n    background: '#F5F5F5',\\n    surface: '#FFFFFF',\\n    text: '#212121',\\n    disabled: '#BDBDBD',\\n    placeholder: '#757575',\\n    notification: '#FF4081',\\n    secondary: '#424242',\\n    navBar: '#263238',\\n    sidePanel: '#ECEFF1',\\n    inspectorPanel: '#FAFAFA',\\n  } as typeof DefaultTheme.colors & {\\n    secondary: string;\\n    navBar: string;\\n    sidePanel: string;\\n    inspectorPanel: string;\\n    disabled: string;\\n  },\\n  fonts: configureFonts({ config: fontConfig }),\\n};\\n\\ninterface ThemeProviderProps {\\n  children: ReactNode;\\n}\\n\\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\\n  // const colorScheme = useColorScheme();\\n  // Optionally, you could switch to a dark theme here if colorScheme === 'dark'\\n  const theme = useMemo(() => customTheme, []);\\n\\n  return (\\n    <PaperProvider theme={theme}>\\n      {children}\\n    </PaperProvider>\\n  );\\n};\\n\\nexport default ThemeProvider;\\n\",\"errorMessages\":[\"'colorScheme' is assigned a value but never used.\",\"Module '\\\"react-native-paper\\\"' has no exported member 'Theme'.\",\"No overload matches this call.\\n  The last overload gave the following error.\\n    Argument of type '{ web: { regular: { fontFamily: string; fontWeight: \\\"400\\\"; fontSize: number; }; medium: { fontFamily: string; fontWeight: \\\"500\\\"; fontSize: number; }; light: { fontFamily: string; fontWeight: \\\"300\\\"; fontSize: number; }; thin: { ...; }; }; ios: { ...; }; android: { ...; }; }' is not assignable to parameter of type '{ config: Record<string, MD3Type>; isV3?: true | undefined; }'.\\n      Property 'config' is missing in type '{ web: { regular: { fontFamily: string; fontWeight: \\\"400\\\"; fontSize: number; }; medium: { fontFamily: string; fontWeight: \\\"500\\\"; fontSize: number; }; light: { fontFamily: string; fontWeight: \\\"300\\\"; fontSize: number; }; thin: { ...; }; }; ios: { ...; }; android: { ...; }; }' but required in type '{ config: Record<string, MD3Type>; isV3?: true | undefined; }'.\",\"'colorScheme' is declared but its value is never read.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/NavBar.tsx\",\"content\":\"import React, { useCallback } from 'react';\\nimport { View, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';\\nimport { useTheme, Tooltip } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst NAVBAR_WIDTH = 64;\\n\\nconst NavBar: React.FC = () => {\\n  const theme = useTheme();\\n  const { tools } = usePluginRegistry();\\n  const toolList = Object.values(tools);\\n  const activeToolKey = useUIStore((state: any) => state.activeToolKey);\\n  const setActiveToolKey = useUIStore((state: any) => state.setActiveToolKey);\\n\\n  const handleToolPress = useCallback(\\n    (key: string) => {\\n      if (activeToolKey !== key) {\\n        setActiveToolKey(key);\\n      }\\n    },\\n    [activeToolKey, setActiveToolKey]\\n  );\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: (theme.colors as any).navBar, borderRightColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole=\\\"navigation\\\"\\n      accessibilityLabel=\\\"Main Navigation Bar\\\"\\n    >\\n      <ScrollView\\n        contentContainerStyle={styles.scrollContainer}\\n        showsVerticalScrollIndicator={false}\\n        keyboardShouldPersistTaps=\\\"handled\\\"\\n      >\\n        {toolList.length === 0 ? (\\n          <View style={styles.emptyState}>\\n            <MaterialCommunityIcons name=\\\"plus-box-outline\\\" size={32} color={(theme.colors as any).disabled} />\\n          </View>\\n        ) : (\\n          toolList.map((tool) => (\\n            <Tooltip key={tool.key} title={tool.label} enterTouchDelay={0}>\\n              <TouchableOpacity\\n                accessibilityRole=\\\"button\\\"\\n                accessibilityLabel={tool.label}\\n                accessibilityState={{ selected: activeToolKey === tool.key }}\\n                onPress={() => handleToolPress(tool.key)}\\n                style={[\\n                  styles.iconButton,\\n                  activeToolKey === tool.key && {\\n                    backgroundColor: (theme.colors as any).primary + '22',\\n                  },\\n                ]}\\n                testID={`navbar-tool-${tool.key}`}\\n              >\\n                <MaterialCommunityIcons\\n                  name={tool.icon as any}\\n                  size={28}\\n                  color={activeToolKey === tool.key ? (theme.colors as any).primary : (theme.colors as any).disabled}\\n                  accessibilityLabel={tool.label}\\n                />\\n              </TouchableOpacity>\\n            </Tooltip>\\n          ))\\n        )}\\n      </ScrollView>\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: NAVBAR_WIDTH,\\n    minWidth: NAVBAR_WIDTH,\\n    maxWidth: NAVBAR_WIDTH,\\n    height: '100%',\\n    borderRightWidth: 1,\\n    alignItems: 'center',\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    shadowColor: '#000',\\n    shadowOffset: { width: 1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n  },\\n  scrollContainer: {\\n    alignItems: 'center',\\n    gap: 8,\\n  },\\n  iconButton: {\\n    width: 48,\\n    height: 48,\\n    borderRadius: 24,\\n    marginVertical: 4,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n  emptyState: {\\n    marginTop: 32,\\n    alignItems: 'center',\\n    opacity: 0.5,\\n  },\\n});\\n\\nexport default NavBar;\\n\",\"errorMessages\":[\"'IconButton' is defined but never used.\",\"Parameter 'state' implicitly has an 'any' type.\",\"Parameter 'state' implicitly has an 'any' type.\",\"Property 'navBar' does not exist on type 'MD3Colors'.\",\"Type '\\\"navigation\\\"' is not assignable to type 'AccessibilityRole | undefined'.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"Type '{ children: Element; accessibilityRole: \\\"button\\\"; as: any; accessibilityLabel: string; accessibilityState: { selected: boolean; }; onPress: () => void; style: (false | { width: number; ... 4 more ...; justifyContent: \\\"center\\\"; } | { ...; })[]; testID: string; }' is not assignable to type 'IntrinsicAttributes & TouchableOpacityProps & RefAttributes<View>'.\\n  Property 'as' does not exist on type 'IntrinsicAttributes & TouchableOpacityProps & RefAttributes<View>'.\",\"'AccessibilityRole' only refers to a type, but is being used as a value here.\",\"Type 'string' is not assignable to type '\\\"symbol\\\" | \\\"function\\\" | \\\"repeat\\\" | \\\"anchor\\\" | \\\"link\\\" | \\\"at\\\" | \\\"tools\\\" | \\\"sort\\\" | \\\"map\\\" | \\\"filter\\\" | \\\"web\\\" | \\\"android\\\" | \\\"details\\\" | \\\"head\\\" | \\\"label\\\" | \\\"menu\\\" | \\\"script\\\" | \\\"select\\\" | ... 6578 more ... | undefined'.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"'AccessibilityRole' is declared but its value is never read.\",\"'IconButton' is declared but its value is never read.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/SidePanel.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\n\\nconst SIDEPANEL_WIDTH = 280;\\n\\nconst SidePanel: React.FC = () => {\\n  const theme = useTheme();\\n  const { sidePanels } = usePluginRegistry();\\n  const activeToolKey = useUIStore((state: any) => state.activeToolKey);\\n\\n  // Memoize the panel component for the active tool\\n  const PanelComponent = useMemo(() => {\\n    if (!activeToolKey) return null;\\n    const reg = sidePanels[activeToolKey];\\n    return reg ? reg.panelComponent : null;\\n  }, [activeToolKey, sidePanels]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: (theme.colors as any).sidePanel, borderRightColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole=\\\"complementary\\\"\\n      accessibilityLabel=\\\"Side Panel\\\"\\n      testID=\\\"side-panel\\\"\\n    >\\n      {PanelComponent ? (\\n        <PanelComponent />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name={\\\"view-day-outline\\\"} size={40} color={(theme.colors as any).disabled} />\\n          <Text style={[styles.emptyText, { color: (theme.colors as any).disabled }]}>No panel available</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: SIDEPANEL_WIDTH,\\n    minWidth: SIDEPANEL_WIDTH,\\n    maxWidth: SIDEPANEL_WIDTH,\\n    height: '100%',\\n    borderRightWidth: 1,\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    paddingHorizontal: 0,\\n    shadowColor: '#000',\\n    shadowOffset: { width: 1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n    justifyContent: 'flex-start',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 12,\\n    fontSize: 16,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default SidePanel;\\n\",\"errorMessages\":[\"Parameter 'state' implicitly has an 'any' type.\",\"Property 'sidePanel' does not exist on type 'MD3Colors'.\",\"Type '\\\"complementary\\\"' is not assignable to type 'AccessibilityRole | undefined'.\",\"'AccessibilityRole' only refers to a type, but is being used as a value here.\",\"Type '\\\"view-sidebar-outline\\\"' is not assignable to type '\\\"symbol\\\" | \\\"function\\\" | \\\"repeat\\\" | \\\"anchor\\\" | \\\"link\\\" | \\\"at\\\" | \\\"tools\\\" | \\\"sort\\\" | \\\"map\\\" | \\\"filter\\\" | \\\"web\\\" | \\\"android\\\" | \\\"details\\\" | \\\"head\\\" | \\\"label\\\" | \\\"menu\\\" | \\\"script\\\" | \\\"select\\\" | ... 6578 more ... | undefined'. Did you mean '\\\"view-day-outline\\\"'?\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"'AccessibilityRole' is declared but its value is never read.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/MainContentArea.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst MAINCONTENTAREA_MIN_WIDTH = 0; // Flexible, takes up remaining space\\n\\nconst MainContentArea: React.FC = () => {\\n  const theme = useTheme();\\n  const { mainContents } = usePluginRegistry();\\n  const activeToolKey = useUIStore((state: any) => state.activeToolKey);\\n\\n  // Memoize the content component for the active tool\\n  const ContentComponent = useMemo(() => {\\n    if (!activeToolKey) return null;\\n    const reg = mainContents[activeToolKey];\\n    return reg ? reg.contentComponent : null;\\n  }, [activeToolKey, mainContents]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: theme.colors.background },\\n      ]}\\n      accessibilityRole=\\\"main\\\"\\n      accessibilityLabel=\\\"Main Content Area\\\"\\n      testID=\\\"main-content-area\\\"\\n    >\\n      {ContentComponent ? (\\n        <ContentComponent />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name={\\\"application-outline\\\"} size={56} color={(theme.colors as any).disabled} />\\n          <Text style={[styles.emptyText, { color: (theme.colors as any).disabled }]}>No content available</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    minWidth: MAINCONTENTAREA_MIN_WIDTH,\\n    height: '100%',\\n    padding: 0,\\n    justifyContent: 'flex-start',\\n    alignItems: 'stretch',\\n    overflow: 'hidden',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 16,\\n    fontSize: 18,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default MainContentArea;\\n\",\"errorMessages\":[\"Parameter 'state' implicitly has an 'any' type.\",\"Type '\\\"main\\\"' is not assignable to type 'AccessibilityRole | undefined'.\",\"'AccessibilityRole' only refers to a type, but is being used as a value here.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"'AccessibilityRole' is declared but its value is never read.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/InspectorPanel.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst INSPECTOR_PANEL_WIDTH = 320;\\n\\nconst InspectorPanel: React.FC = () => {\\n  const theme = useTheme();\\n  const { inspectors } = usePluginRegistry();\\n  const selection = useUIStore((state: any) => state.selection);\\n\\n  // Memoize the inspector component for the current selection context\\n  const InspectorComponent = useMemo(() => {\\n    if (!selection || !selection.type) return null;\\n    const reg = inspectors[selection.type];\\n    return reg ? reg.inspectorComponent : null;\\n  }, [selection, inspectors]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: (theme.colors as any).inspectorPanel, borderLeftColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole=\\\"complementary\\\"\\n      accessibilityLabel=\\\"Inspector Panel\\\"\\n      testID=\\\"inspector-panel\\\"\\n    >\\n      {InspectorComponent ? (\\n        <InspectorComponent selection={selection} />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name={\\\"file-document-outline\\\"} size={40} color={(theme.colors as any).disabled} />\\n          <Text style={[styles.emptyText, { color: (theme.colors as any).disabled }]}>No details to display</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: INSPECTOR_PANEL_WIDTH,\\n    minWidth: INSPECTOR_PANEL_WIDTH,\\n    maxWidth: INSPECTOR_PANEL_WIDTH,\\n    height: '100%',\\n    borderLeftWidth: 1,\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    paddingHorizontal: 16,\\n    shadowColor: '#000',\\n    shadowOffset: { width: -1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n    justifyContent: 'flex-start',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 12,\\n    fontSize: 16,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default InspectorPanel;\\n\",\"errorMessages\":[\"Parameter 'state' implicitly has an 'any' type.\",\"Property 'inspectorPanel' does not exist on type 'MD3Colors'.\",\"Type '\\\"complementary\\\"' is not assignable to type 'AccessibilityRole | undefined'.\",\"'AccessibilityRole' only refers to a type, but is being used as a value here.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"Property 'disabled' does not exist on type 'MD3Colors'.\",\"'AccessibilityRole' is declared but its value is never read.\"],\"contentType\":\"typescript\"},{\"filePath\":\"app/AppShell.tsx\",\"content\":\"import React from 'react';\\nimport { View, StyleSheet, SafeAreaView, Platform, StatusBar } from 'react-native';\\nimport ThemeProvider from '../components/ThemeProvider';\\nimport NavBar from '../components/NavBar';\\nimport SidePanel from '../components/SidePanel';\\nimport MainContentArea from '../components/MainContentArea';\\nimport InspectorPanel from '../components/InspectorPanel';\\nimport { useTheme } from 'react-native-paper';\\n\\nconst AppShell: React.FC = () => {\\n  // ThemeProvider wraps the entire app for Paper UI and custom theme\\n  return (\\n    <ThemeProvider>\\n      <SafeAreaView style={styles.safeArea}>\\n        <View style={styles.root}>\\n          <NavBar />\\n          <SidePanel />\\n          <MainContentArea />\\n          <InspectorPanel />\\n        </View>\\n      </SafeAreaView>\\n    </ThemeProvider>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  safeArea: {\\n    flex: 1,\\n    backgroundColor: '#F5F5F5',\\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\\n  },\\n  root: {\\n    flex: 1,\\n    flexDirection: 'row',\\n    alignItems: 'stretch',\\n    justifyContent: 'flex-start',\\n    minHeight: 0,\\n    minWidth: 0,\\n    backgroundColor: '#F5F5F5',\\n  },\\n});\\n\\nexport default AppShell;\\n\",\"errorMessages\":[\"'useTheme' is defined but never used.\",\"'useTheme' is declared but its value is never read.\"],\"contentType\":\"typescript\"}].",
    "role": "system"
  },
  {
    "content": "You are an expert at debugging and fixing issues in code. You will be provided with a list of files, each with its current content and a list of error messages.Your task is to identify and fix all issues in all files, taking into account cross-file dependencies.For each file, apply all necessary fixes so that all error messages are resolved.Return the fixed content for each file. Do not provide any explanation or additional information.Respond strictly in the required JSON schema. Here are the files and their issues: [{\"filePath\":\"components/ThemeProvider.tsx\",\"content\":\"import React, { ReactNode, useMemo } from 'react';\\nimport { Provider as PaperProvider, DefaultTheme, configureFonts } from 'react-native-paper';\\n\\nconst fontConfig = {\\n  web: {\\n    regular: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n    },\\n    medium: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n    },\\n    light: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n    },\\n    thin: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n    },\\n  },\\n  ios: {\\n    regular: {\\n      fontFamily: 'Inter',\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n    },\\n    medium: {\\n      fontFamily: 'Inter',\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n    },\\n    light: {\\n      fontFamily: 'Inter',\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n    },\\n    thin: {\\n      fontFamily: 'Inter',\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n    },\\n  },\\n  android: {\\n    regular: {\\n      fontFamily: 'Inter',\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n    },\\n    medium: {\\n      fontFamily: 'Inter',\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n    },\\n    light: {\\n      fontFamily: 'Inter',\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n    },\\n    thin: {\\n      fontFamily: 'Inter',\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n    },\\n  },\\n};\\n\\nconst customTheme = {\\n  ...DefaultTheme,\\n  roundness: 8,\\n  colors: {\\n    ...DefaultTheme.colors,\\n    primary: '#1976D2',\\n    accent: '#FF4081',\\n    background: '#F5F5F5',\\n    surface: '#FFFFFF',\\n    text: '#212121',\\n    disabled: '#BDBDBD',\\n    placeholder: '#757575',\\n    notification: '#FF4081',\\n    secondary: '#424242',\\n    navBar: '#263238',\\n    sidePanel: '#ECEFF1',\\n    inspectorPanel: '#FAFAFA',\\n  } as typeof DefaultTheme.colors & {\\n    secondary: string;\\n    navBar: string;\\n    sidePanel: string;\\n    inspectorPanel: string;\\n    disabled: string;\\n  },\\n  fonts: configureFonts({ config: fontConfig }),\\n};\\n\\ninterface ThemeProviderProps {\\n  children: ReactNode;\\n}\\n\\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\\n  const theme = useMemo(() => customTheme, []);\\n\\n  return (\\n    <PaperProvider theme={theme}>\\n      {children}\\n    </PaperProvider>\\n  );\\n};\\n\\nexport default ThemeProvider;\\n\",\"errorMessages\":[\"'useColorScheme' is defined but never used.\",\"No overload matches this call.\\n  The last overload gave the following error.\\n    Type '{ web: { regular: { fontFamily: string; fontWeight: \\\"400\\\"; fontSize: number; }; medium: { fontFamily: string; fontWeight: \\\"500\\\"; fontSize: number; }; light: { fontFamily: string; fontWeight: \\\"300\\\"; fontSize: number; }; thin: { ...; }; }; ios: { ...; }; android: { ...; }; }' is not assignable to type 'Record<string, MD3Type>'.\\n      Property 'web' is incompatible with index signature.\\n        Type '{ regular: { fontFamily: string; fontWeight: \\\"400\\\"; fontSize: number; }; medium: { fontFamily: string; fontWeight: \\\"500\\\"; fontSize: number; }; light: { fontFamily: string; fontWeight: \\\"300\\\"; fontSize: number; }; thin: { ...; }; }' is missing the following properties from type 'MD3Type': fontFamily, letterSpacing, fontWeight, lineHeight, fontSize\",\"'useColorScheme' is declared but its value is never read.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/NavBar.tsx\",\"content\":\"import React, { useCallback } from 'react';\\nimport { View, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';\\nimport { useTheme, Tooltip } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst NAVBAR_WIDTH = 64;\\n\\nconst NavBar: React.FC = () => {\\n  const theme = useTheme();\\n  const { tools } = usePluginRegistry();\\n  const toolList = Object.values(tools);\\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\\n  const setActiveToolKey = useUIStore((state) => state.setActiveToolKey);\\n\\n  const handleToolPress = useCallback(\\n    (key: string) => {\\n      if (activeToolKey !== key) {\\n        setActiveToolKey(key);\\n      }\\n    },\\n    [activeToolKey, setActiveToolKey]\\n  );\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: (theme.colors as any).navBar, borderRightColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole={\\\"navigation\\\"}\\n      accessibilityLabel=\\\"Main Navigation Bar\\\"\\n    >\\n      <ScrollView\\n        contentContainerStyle={styles.scrollContainer}\\n        showsVerticalScrollIndicator={false}\\n        keyboardShouldPersistTaps=\\\"handled\\\"\\n      >\\n        {toolList.length === 0 ? (\\n          <View style={styles.emptyState}>\\n            <MaterialCommunityIcons name=\\\"plus-box-outline\\\" size={32} color={(theme.colors as any).disabled} />\\n          </View>\\n        ) : (\\n          toolList.map((tool) => (\\n            <Tooltip key={tool.key} title={tool.label} enterTouchDelay={0}>\\n              <TouchableOpacity\\n                accessibilityRole=\\\"button\\\"\\n                accessibilityLabel={tool.label}\\n                accessibilityState={{ selected: activeToolKey === tool.key }}\\n                onPress={() => handleToolPress(tool.key)}\\n                style={[\\n                  styles.iconButton,\\n                  activeToolKey === tool.key && {\\n                    backgroundColor: (theme.colors as any).primary + '22',\\n                  },\\n                ]}\\n                testID={`navbar-tool-${tool.key}`}\\n              >\\n                <MaterialCommunityIcons\\n                  name={tool.icon as any}\\n                  size={28}\\n                  color={activeToolKey === tool.key ? (theme.colors as any).primary : (theme.colors as any).disabled}\\n                  accessibilityLabel={tool.label}\\n                />\\n              </TouchableOpacity>\\n            </Tooltip>\\n          ))\\n        )}\\n      </ScrollView>\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: NAVBAR_WIDTH,\\n    minWidth: NAVBAR_WIDTH,\\n    maxWidth: NAVBAR_WIDTH,\\n    height: '100%',\\n    borderRightWidth: 1,\\n    alignItems: 'center',\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    shadowColor: '#000',\\n    shadowOffset: { width: 1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n  },\\n  scrollContainer: {\\n    alignItems: 'center',\\n    gap: 8,\\n  },\\n  iconButton: {\\n    width: 48,\\n    height: 48,\\n    borderRadius: 24,\\n    marginVertical: 4,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n  emptyState: {\\n    marginTop: 32,\\n    alignItems: 'center',\\n    opacity: 0.5,\\n  },\\n});\\n\\nexport default NavBar;\\n\",\"errorMessages\":[\"Type '\\\"navigation\\\"' is not assignable to type 'AccessibilityRole | undefined'.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/SidePanel.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\n\\nconst SIDEPANEL_WIDTH = 280;\\n\\nconst SidePanel: React.FC = () => {\\n  const theme = useTheme();\\n  const { sidePanels } = usePluginRegistry();\\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\\n\\n  // Memoize the panel component for the active tool\\n  const PanelComponent = useMemo(() => {\\n    if (!activeToolKey) return null;\\n    const reg = sidePanels[activeToolKey];\\n    return reg ? reg.panelComponent : null;\\n  }, [activeToolKey, sidePanels]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: (theme.colors as any).sidePanel, borderRightColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole={\\\"complementary\\\"}\\n      accessibilityLabel=\\\"Side Panel\\\"\\n      testID=\\\"side-panel\\\"\\n    >\\n      {PanelComponent ? (\\n        <PanelComponent />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name={\\\"view-day-outline\\\"} size={40} color={(theme.colors as any).disabled} />\\n          <Text style={[styles.emptyText, { color: (theme.colors as any).disabled }]}>No panel available</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: SIDEPANEL_WIDTH,\\n    minWidth: SIDEPANEL_WIDTH,\\n    maxWidth: SIDEPANEL_WIDTH,\\n    height: '100%',\\n    borderRightWidth: 1,\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    paddingHorizontal: 0,\\n    shadowColor: '#000',\\n    shadowOffset: { width: 1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n    justifyContent: 'flex-start',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 12,\\n    fontSize: 16,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default SidePanel;\\n\",\"errorMessages\":[\"Type '\\\"complementary\\\"' is not assignable to type 'AccessibilityRole | undefined'.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/MainContentArea.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst MAINCONTENTAREA_MIN_WIDTH = 0; // Flexible, takes up remaining space\\n\\nconst MainContentArea: React.FC = () => {\\n  const theme = useTheme();\\n  const { mainContents } = usePluginRegistry();\\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\\n\\n  // Memoize the content component for the active tool\\n  const ContentComponent = useMemo(() => {\\n    if (!activeToolKey) return null;\\n    const reg = mainContents[activeToolKey];\\n    return reg ? reg.contentComponent : null;\\n  }, [activeToolKey, mainContents]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: theme.colors.background },\\n      ]}\\n      accessibilityRole={\\\"main\\\"}\\n      accessibilityLabel=\\\"Main Content Area\\\"\\n      testID=\\\"main-content-area\\\"\\n    >\\n      {ContentComponent ? (\\n        <ContentComponent />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name={\\\"application-outline\\\"} size={56} color={(theme.colors as any).disabled} />\\n          <Text style={[styles.emptyText, { color: (theme.colors as any).disabled }]}>No content available</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    minWidth: MAINCONTENTAREA_MIN_WIDTH,\\n    height: '100%',\\n    padding: 0,\\n    justifyContent: 'flex-start',\\n    alignItems: 'stretch',\\n    overflow: 'hidden',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 16,\\n    fontSize: 18,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default MainContentArea;\\n\",\"errorMessages\":[\"Type '\\\"main\\\"' is not assignable to type 'AccessibilityRole | undefined'.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/InspectorPanel.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst INSPECTOR_PANEL_WIDTH = 320;\\n\\nconst InspectorPanel: React.FC = () => {\\n  const theme = useTheme();\\n  const { inspectors } = usePluginRegistry();\\n  const selection = useUIStore((state) => state.selection);\\n\\n  // Memoize the inspector component for the current selection context\\n  const InspectorComponent = useMemo(() => {\\n    if (!selection || !selection.type) return null;\\n    const reg = inspectors[selection.type];\\n    return reg ? reg.inspectorComponent : null;\\n  }, [selection, inspectors]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: (theme.colors as any).inspectorPanel, borderLeftColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole={\\\"complementary\\\"}\\n      accessibilityLabel=\\\"Inspector Panel\\\"\\n      testID=\\\"inspector-panel\\\"\\n    >\\n      {InspectorComponent ? (\\n        <InspectorComponent selection={selection} />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name={\\\"file-document-outline\\\"} size={40} color={(theme.colors as any).disabled} />\\n          <Text style={[styles.emptyText, { color: (theme.colors as any).disabled }]}>No details to display</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: INSPECTOR_PANEL_WIDTH,\\n    minWidth: INSPECTOR_PANEL_WIDTH,\\n    maxWidth: INSPECTOR_PANEL_WIDTH,\\n    height: '100%',\\n    borderLeftWidth: 1,\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    paddingHorizontal: 16,\\n    shadowColor: '#000',\\n    shadowOffset: { width: -1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n    justifyContent: 'flex-start',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 12,\\n    fontSize: 16,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default InspectorPanel;\\n\",\"errorMessages\":[\"Type '\\\"complementary\\\"' is not assignable to type 'AccessibilityRole | undefined'.\"],\"contentType\":\"typescript\"},{\"filePath\":\"app/AppShell.tsx\",\"content\":\"import React from 'react';\\nimport { View, StyleSheet, SafeAreaView, Platform, StatusBar } from 'react-native';\\nimport ThemeProvider from '../components/ThemeProvider';\\nimport NavBar from '../components/NavBar';\\nimport SidePanel from '../components/SidePanel';\\nimport MainContentArea from '../components/MainContentArea';\\nimport InspectorPanel from '../components/InspectorPanel';\\n\\nconst AppShell: React.FC = () => {\\n  // ThemeProvider wraps the entire app for Paper UI and custom theme\\n  return (\\n    <ThemeProvider>\\n      <SafeAreaView style={styles.safeArea}>\\n        <View style={styles.root}>\\n          <NavBar />\\n          <SidePanel />\\n          <MainContentArea />\\n          <InspectorPanel />\\n        </View>\\n      </SafeAreaView>\\n    </ThemeProvider>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  safeArea: {\\n    flex: 1,\\n    backgroundColor: '#F5F5F5',\\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\\n  },\\n  root: {\\n    flex: 1,\\n    flexDirection: 'row',\\n    alignItems: 'stretch',\\n    justifyContent: 'flex-start',\\n    minHeight: 0,\\n    minWidth: 0,\\n    backgroundColor: '#F5F5F5',\\n  },\\n});\\n\\nexport default AppShell;\\n\",\"errorMessages\":[\"'useTheme' is defined but never used.\",\"'useTheme' is declared but its value is never read.\"],\"contentType\":\"typescript\"}].",
    "role": "system"
  },
  {
    "content": "You are an expert at debugging and fixing issues in code. You will be provided with a list of files, each with its current content and a list of error messages.Your task is to identify and fix all issues in all files, taking into account cross-file dependencies.For each file, apply all necessary fixes so that all error messages are resolved.Return the fixed content for each file. Do not provide any explanation or additional information.Respond strictly in the required JSON schema. Here are the files and their issues: [{\"filePath\":\"components/ThemeProvider.tsx\",\"content\":\"import React, { ReactNode, useMemo } from 'react';\\nimport { Provider as PaperProvider, DefaultTheme, configureFonts } from 'react-native-paper';\\n\\nconst fontConfig = {\\n  default: {\\n    regular: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n    },\\n    medium: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n    },\\n    light: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n    },\\n    thin: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n    },\\n  },\\n};\\n\\nconst customTheme = {\\n  ...DefaultTheme,\\n  roundness: 8,\\n  colors: {\\n    ...DefaultTheme.colors,\\n    primary: '#1976D2',\\n    accent: '#FF4081',\\n    background: '#F5F5F5',\\n    surface: '#FFFFFF',\\n    text: '#212121',\\n    disabled: '#BDBDBD',\\n    placeholder: '#757575',\\n    notification: '#FF4081',\\n    secondary: '#424242',\\n    navBar: '#263238',\\n    sidePanel: '#ECEFF1',\\n    inspectorPanel: '#FAFAFA',\\n  } as typeof DefaultTheme.colors & {\\n    secondary: string;\\n    navBar: string;\\n    sidePanel: string;\\n    inspectorPanel: string;\\n    disabled: string;\\n  },\\n  fonts: configureFonts({ config: fontConfig }),\\n};\\n\\ninterface ThemeProviderProps {\\n  children: ReactNode;\\n}\\n\\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\\n  const theme = useMemo(() => customTheme, []);\\n\\n  return (\\n    <PaperProvider theme={theme}>\\n      {children}\\n    </PaperProvider>\\n  );\\n};\\n\\nexport default ThemeProvider;\\n\",\"errorMessages\":[\"No overload matches this call.\\n  The last overload gave the following error.\\n    Type '{ web: { regular: { fontFamily: string; fontWeight: \\\"400\\\"; fontSize: number; }; medium: { fontFamily: string; fontWeight: \\\"500\\\"; fontSize: number; }; light: { fontFamily: string; fontWeight: \\\"300\\\"; fontSize: number; }; thin: { ...; }; }; ios: { ...; }; android: { ...; }; }' is not assignable to type 'Record<string, MD3Type>'.\\n      Property 'web' is incompatible with index signature.\\n        Type '{ regular: { fontFamily: string; fontWeight: \\\"400\\\"; fontSize: number; }; medium: { fontFamily: string; fontWeight: \\\"500\\\"; fontSize: number; }; light: { fontFamily: string; fontWeight: \\\"300\\\"; fontSize: number; }; thin: { ...; }; }' is missing the following properties from type 'MD3Type': fontFamily, letterSpacing, fontWeight, lineHeight, fontSize\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/NavBar.tsx\",\"content\":\"import React, { useCallback } from 'react';\\nimport { View, StyleSheet, ScrollView, TouchableOpacity, AccessibilityRole } from 'react-native';\\nimport { useTheme, Tooltip } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst NAVBAR_WIDTH = 64;\\n\\nconst NavBar: React.FC = () => {\\n  const theme = useTheme();\\n  const { tools } = usePluginRegistry();\\n  const toolList = Object.values(tools);\\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\\n  const setActiveToolKey = useUIStore((state) => state.setActiveToolKey);\\n\\n  const handleToolPress = useCallback(\\n    (key: string) => {\\n      if (activeToolKey !== key) {\\n        setActiveToolKey(key);\\n      }\\n    },\\n    [activeToolKey, setActiveToolKey]\\n  );\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: (theme.colors as any).navBar, borderRightColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole={\\\"none\\\" as AccessibilityRole}\\n      accessibilityLabel=\\\"Main Navigation Bar\\\"\\n    >\\n      <ScrollView\\n        contentContainerStyle={styles.scrollContainer}\\n        showsVerticalScrollIndicator={false}\\n        keyboardShouldPersistTaps=\\\"handled\\\"\\n      >\\n        {toolList.length === 0 ? (\\n          <View style={styles.emptyState}>\\n            <MaterialCommunityIcons name=\\\"plus-box-outline\\\" size={32} color={(theme.colors as any).disabled} />\\n          </View>\\n        ) : (\\n          toolList.map((tool) => (\\n            <Tooltip key={tool.key} title={tool.label} enterTouchDelay={0}>\\n              <TouchableOpacity\\n                accessibilityRole=\\\"button\\\"\\n                accessibilityLabel={tool.label}\\n                accessibilityState={{ selected: activeToolKey === tool.key }}\\n                onPress={() => handleToolPress(tool.key)}\\n                style={[\\n                  styles.iconButton,\\n                  activeToolKey === tool.key && {\\n                    backgroundColor: (theme.colors as any).primary + '22',\\n                  },\\n                ]}\\n                testID={`navbar-tool-${tool.key}`}\\n              >\\n                <MaterialCommunityIcons\\n                  name={tool.icon as any}\\n                  size={28}\\n                  color={activeToolKey === tool.key ? (theme.colors as any).primary : (theme.colors as any).disabled}\\n                  accessibilityLabel={tool.label}\\n                />\\n              </TouchableOpacity>\\n            </Tooltip>\\n          ))\\n        )}\\n      </ScrollView>\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: NAVBAR_WIDTH,\\n    minWidth: NAVBAR_WIDTH,\\n    maxWidth: NAVBAR_WIDTH,\\n    height: '100%',\\n    borderRightWidth: 1,\\n    alignItems: 'center',\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    shadowColor: '#000',\\n    shadowOffset: { width: 1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n  },\\n  scrollContainer: {\\n    alignItems: 'center',\\n    gap: 8,\\n  },\\n  iconButton: {\\n    width: 48,\\n    height: 48,\\n    borderRadius: 24,\\n    marginVertical: 4,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n  emptyState: {\\n    marginTop: 32,\\n    alignItems: 'center',\\n    opacity: 0.5,\\n  },\\n});\\n\\nexport default NavBar;\\n\",\"errorMessages\":[\"Type '\\\"navigation\\\"' is not assignable to type 'AccessibilityRole | undefined'.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/SidePanel.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\n\\nconst SIDEPANEL_WIDTH = 280;\\n\\nconst SidePanel: React.FC = () => {\\n  const theme = useTheme();\\n  const { sidePanels } = usePluginRegistry();\\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\\n\\n  // Memoize the panel component for the active tool\\n  const PanelComponent = useMemo(() => {\\n    if (!activeToolKey) return null;\\n    const reg = sidePanels[activeToolKey];\\n    return reg ? reg.panelComponent : null;\\n  }, [activeToolKey, sidePanels]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: (theme.colors as any).sidePanel, borderRightColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole={\\\"none\\\" as AccessibilityRole}\\n      accessibilityLabel=\\\"Side Panel\\\"\\n      testID=\\\"side-panel\\\"\\n    >\\n      {PanelComponent ? (\\n        <PanelComponent />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name={\\\"view-day-outline\\\"} size={40} color={(theme.colors as any).disabled} />\\n          <Text style={[styles.emptyText, { color: (theme.colors as any).disabled }]}>No panel available</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: SIDEPANEL_WIDTH,\\n    minWidth: SIDEPANEL_WIDTH,\\n    maxWidth: SIDEPANEL_WIDTH,\\n    height: '100%',\\n    borderRightWidth: 1,\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    paddingHorizontal: 0,\\n    shadowColor: '#000',\\n    shadowOffset: { width: 1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n    justifyContent: 'flex-start',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 12,\\n    fontSize: 16,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default SidePanel;\\n\",\"errorMessages\":[\"Type '\\\"complementary\\\"' is not assignable to type 'AccessibilityRole | undefined'.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/MainContentArea.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst MAINCONTENTAREA_MIN_WIDTH = 0; // Flexible, takes up remaining space\\n\\nconst MainContentArea: React.FC = () => {\\n  const theme = useTheme();\\n  const { mainContents } = usePluginRegistry();\\n  const activeToolKey = useUIStore((state) => state.activeToolKey);\\n\\n  // Memoize the content component for the active tool\\n  const ContentComponent = useMemo(() => {\\n    if (!activeToolKey) return null;\\n    const reg = mainContents[activeToolKey];\\n    return reg ? reg.contentComponent : null;\\n  }, [activeToolKey, mainContents]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: theme.colors.background },\\n      ]}\\n      accessibilityRole={\\\"none\\\" as AccessibilityRole}\\n      accessibilityLabel=\\\"Main Content Area\\\"\\n      testID=\\\"main-content-area\\\"\\n    >\\n      {ContentComponent ? (\\n        <ContentComponent />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name={\\\"application-outline\\\"} size={56} color={(theme.colors as any).disabled} />\\n          <Text style={[styles.emptyText, { color: (theme.colors as any).disabled }]}>No content available</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    minWidth: MAINCONTENTAREA_MIN_WIDTH,\\n    height: '100%',\\n    padding: 0,\\n    justifyContent: 'flex-start',\\n    alignItems: 'stretch',\\n    overflow: 'hidden',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 16,\\n    fontSize: 18,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default MainContentArea;\\n\",\"errorMessages\":[\"Type '\\\"main\\\"' is not assignable to type 'AccessibilityRole | undefined'.\"],\"contentType\":\"typescript\"},{\"filePath\":\"components/InspectorPanel.tsx\",\"content\":\"import React, { useMemo } from 'react';\\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\\nimport { useTheme, Text } from 'react-native-paper';\\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\\nimport { usePluginRegistry } from '../hooks/usePluginRegistry';\\nimport { useUIStore } from '../store/zustandStore';\\n\\nconst INSPECTOR_PANEL_WIDTH = 320;\\n\\nconst InspectorPanel: React.FC = () => {\\n  const theme = useTheme();\\n  const { inspectors } = usePluginRegistry();\\n  const selection = useUIStore((state) => state.selection);\\n\\n  // Memoize the inspector component for the current selection context\\n  const InspectorComponent = useMemo(() => {\\n    if (!selection || !selection.type) return null;\\n    const reg = inspectors[selection.type];\\n    return reg ? reg.inspectorComponent : null;\\n  }, [selection, inspectors]);\\n\\n  return (\\n    <View\\n      style={[\\n        styles.container,\\n        { backgroundColor: (theme.colors as any).inspectorPanel, borderLeftColor: theme.colors.surface },\\n      ]}\\n      accessibilityRole={\\\"none\\\" as AccessibilityRole}\\n      accessibilityLabel=\\\"Inspector Panel\\\"\\n      testID=\\\"inspector-panel\\\"\\n    >\\n      {InspectorComponent ? (\\n        <InspectorComponent selection={selection} />\\n      ) : (\\n        <View style={styles.emptyState}>\\n          <MaterialCommunityIcons name={\\\"file-document-outline\\\"} size={40} color={(theme.colors as any).disabled} />\\n          <Text style={[styles.emptyText, { color: (theme.colors as any).disabled }]}>No details to display</Text>\\n        </View>\\n      )}\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    width: INSPECTOR_PANEL_WIDTH,\\n    minWidth: INSPECTOR_PANEL_WIDTH,\\n    maxWidth: INSPECTOR_PANEL_WIDTH,\\n    height: '100%',\\n    borderLeftWidth: 1,\\n    paddingTop: 16,\\n    paddingBottom: 16,\\n    paddingHorizontal: 16,\\n    shadowColor: '#000',\\n    shadowOffset: { width: -1, height: 0 },\\n    shadowOpacity: 0.04,\\n    shadowRadius: 2,\\n    elevation: 2,\\n    justifyContent: 'flex-start',\\n  },\\n  emptyState: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    opacity: 0.6,\\n  },\\n  emptyText: {\\n    marginTop: 12,\\n    fontSize: 16,\\n    fontWeight: '400',\\n    textAlign: 'center',\\n  },\\n});\\n\\nexport default InspectorPanel;\\n\",\"errorMessages\":[\"Type '\\\"complementary\\\"' is not assignable to type 'AccessibilityRole | undefined'.\"],\"contentType\":\"typescript\"}].",
    "role": "system"
  },
  {
    "content": "You are an expert at debugging and fixing issues in code. You will be provided with a list of files, each with its current content and a list of error messages.Your task is to identify and fix all issues in all files, taking into account cross-file dependencies.For each file, apply all necessary fixes so that all error messages are resolved.Return the fixed content for each file. Do not provide any explanation or additional information.Respond strictly in the required JSON schema. Here are the files and their issues: [{\"filePath\":\"components/ThemeProvider.tsx\",\"content\":\"import React, { ReactNode, useMemo } from 'react';\\nimport { Provider as PaperProvider, DefaultTheme, configureFonts } from 'react-native-paper';\\n\\nconst fontConfig = {\\n  default: {\\n    regular: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '400' as '400',\\n      fontSize: 16,\\n      letterSpacing: 0.5,\\n      lineHeight: 24,\\n    },\\n    medium: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '500' as '500',\\n      fontSize: 16,\\n      letterSpacing: 0.5,\\n      lineHeight: 24,\\n    },\\n    light: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '300' as '300',\\n      fontSize: 16,\\n      letterSpacing: 0.5,\\n      lineHeight: 24,\\n    },\\n    thin: {\\n      fontFamily: \\\"Inter, 'Segoe UI', Arial, sans-serif\\\",\\n      fontWeight: '200' as '200',\\n      fontSize: 16,\\n      letterSpacing: 0.5,\\n      lineHeight: 24,\\n    },\\n  },\\n};\\n\\nconst customTheme = {\\n  ...DefaultTheme,\\n  roundness: 8,\\n  colors: {\\n    ...DefaultTheme.colors,\\n    primary: '#1976D2',\\n    accent: '#FF4081',\\n    background: '#F5F5F5',\\n    surface: '#FFFFFF',\\n    text: '#212121',\\n    disabled: '#BDBDBD',\\n    placeholder: '#757575',\\n    notification: '#FF4081',\\n    secondary: '#424242',\\n    navBar: '#263238',\\n    sidePanel: '#ECEFF1',\\n    inspectorPanel: '#FAFAFA',\\n  } as typeof DefaultTheme.colors & {\\n    secondary: string;\\n    navBar: string;\\n    sidePanel: string;\\n    inspectorPanel: string;\\n    disabled: string;\\n  },\\n  fonts: configureFonts({ config: fontConfig }),\\n};\\n\\ninterface ThemeProviderProps {\\n  children: ReactNode;\\n}\\n\\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\\n  const theme = useMemo(() => customTheme, []);\\n\\n  return (\\n    <PaperProvider theme={theme}>\\n      {children}\\n    </PaperProvider>\\n  );\\n};\\n\\nexport default ThemeProvider;\\n\",\"errorMessages\":[\"No overload matches this call.\\n  The last overload gave the following error.\\n    Type '{ default: { regular: { fontFamily: string; fontWeight: \\\"400\\\"; fontSize: number; }; medium: { fontFamily: string; fontWeight: \\\"500\\\"; fontSize: number; }; light: { fontFamily: string; fontWeight: \\\"300\\\"; fontSize: number; }; thin: { ...; }; }; }' is not assignable to type 'Record<string, MD3Type>'.\\n      Property 'default' is incompatible with index signature.\\n        Type '{ regular: { fontFamily: string; fontWeight: \\\"400\\\"; fontSize: number; }; medium: { fontFamily: string; fontWeight: \\\"500\\\"; fontSize: number; }; light: { fontFamily: string; fontWeight: \\\"300\\\"; fontSize: number; }; thin: { ...; }; }' is missing the following properties from type 'MD3Type': fontFamily, letterSpacing, fontWeight, lineHeight, fontSize\"],\"contentType\":\"typescript\"}].",
    "role": "system"
  }
]